window["apps"] = [
  {
    id: "0000",
    name: "tasks-qute",
    rulesets: [
      {
        name: "camel3",
        description: "Rules for changes between Camel 3.0 and Camel 4.0",
        skipped: [
          "xml-changed-camel41-00003",
          "xml-changed-camel41-00004",
          "xml-changed-camel41-00005",
          "xml-changed-camel41-00006",
          "xml-changed-camel41-00007",
          "xml-changed-camel41-00008",
          "xml-changed-camel41-00009",
          "xml-changed-camel41-00010",
          "xml-changed-camel41-00011",
          "xml-changed-camel41-00012",
          "xml-changed-camel41-00013",
          "xml-changed-camel41-00014",
          "xml-changed-camel41-00015",
          "xml-changedcomponent-camel4-00001",
          "xml-changedcomponent-camel4-00002",
          "xml-removed-camel4-00001",
          "xml-removed-camel4-00002",
          "xml-removed-camel4-00003",
          "xml-removed-camel4-00004",
          "xml-removed-camel4-00005",
          "xml-removed-camel4-00006",
          "xml-removed-camel4-00007",
          "xml-removed-camel4-00008",
          "xml-removed-camel4-00010",
          "xml-removed-camel4-00011",
          "xml-removed-camel4-00012",
          "xml-removed-camel4-00013",
          "xml-removed-camel4-00014",
          "xml-removed-camel4-00015",
          "xml-removed-camel4-00016",
          "xml-removed-camel4-00017",
          "xml-removed-camel4-00018",
          "xml-removed-camel4-00019",
          "xml-removed-camel4-00020",
          "xml-removed-camel4-00021",
          "xml-removed-camel4-00022",
          "xml-removed-camel4-00023",
          "xml-removed-camel4-00024",
          "xml-removed-camel4-00025",
          "xml-removed-camel4-00026",
          "xml-removed-camel4-00027",
          "xml-removed-camel4-00028",
          "xml-removed-camel4-00029",
          "xml-removed-camel4-00030",
          "xml-removed-camel4-00031",
          "xml-removed-camel4-00032",
          "xml-removed-camel4-00033",
          "xml-removed-camel4-00034",
          "xml-removed-camel41-00000",
          "xml-removed-camel41-00001",
          "xml-removed-camel41-00002",
          "xml-removed-camel41-00016",
          "xml-removed-camel41-00017",
          "xml-removed-camel41-00018",
        ],
      },
      {
        name: "camel3/camel2",
        description:
          "Rules for changes in XML file (e.g. pom.xml) to run on Apache Camel 3",
        skipped: [
          "component-changes-00019",
          "java-dsl-changes-00001",
          "java-generic-information-00000",
          "java-generic-information-00001",
          "java-generic-information-00002",
          "java-generic-information-00004",
          "java-generic-information-00005",
          "java-generic-information-00006",
          "java-generic-information-00008",
          "java-generic-information-00009",
          "java-generic-information-00010",
          "java-generic-information-00011",
          "java-generic-information-00012",
          "java-generic-information-00013",
          "java-generic-information-00014",
          "java-generic-information-00015",
          "java-generic-information-00016",
          "java-generic-information-00017",
          "java-generic-information-00018",
          "java-generic-information-00019",
          "java-generic-information-00021",
          "java-generic-information-00022",
          "java-generic-information-00023",
          "java-generic-information-00024",
          "java-generic-information-00025",
          "java-generic-information-00026",
          "java-generic-information-00027",
          "java-generic-information-00028",
          "java-generic-information-00029",
          "java-generic-information-00030",
          "java-generic-information-00031",
          "java-generic-information-00032",
          "java-generic-information-00033",
          "java-generic-information-00045",
          "java-generic-information-00046",
          "java-generic-information-00047",
          "java-generic-information-00048",
          "java-generic-information-00049",
          "java-generic-information-00050",
          "java-generic-information-00051",
          "java-generic-information-00052",
          "java-multiple-camelcontexts-per-application-not-supported-00000",
          "java-multiple-camelcontexts-per-application-not-supported-00001",
          "xml-dsl-changes-00001",
          "xml-dsl-changes-00002",
          "xml-dsl-changes-00003",
          "xml-dsl-changes-00004",
          "xml-dsl-changes-00005",
          "xml-dsl-changes-00006",
          "xml-dsl-changes-00007",
          "xml-dsl-changes-00008",
          "xml-dsl-changes-00009",
          "xml-java-versions-00001",
          "xml-java-versions-00002",
          "xml-java-versions-00003",
          "xml-moved-components-00012",
          "xml-moved-components-00013",
          "xml-moved-components-00014",
          "xml-moved-components-00015",
          "xml-removed-components-00000",
          "xml-removed-components-00001",
          "xml-removed-components-00002",
          "xml-removed-components-00003",
          "xml-removed-components-00004",
          "xml-removed-components-00005",
          "xml-removed-components-00005-01",
          "xml-removed-components-00006",
          "xml-removed-components-00007",
          "xml-removed-components-00007-01",
          "xml-removed-components-00008",
          "xml-removed-components-00008-01",
          "xml-renamed-components-00000",
          "xml-renamed-components-00001",
          "xml-renamed-components-000019",
          "xml-renamed-components-00002",
          "xml-renamed-components-000020",
          "xml-renamed-components-000023",
          "xml-renamed-components-000024",
          "xml-renamed-components-000027",
          "xml-renamed-components-000028",
          "xml-renamed-components-000029",
          "xml-renamed-components-00003",
          "xml-renamed-components-00004",
          "xml-renamed-components-00005",
          "xml-renamed-components-00006",
          "xml-renamed-components-00007",
          "xml-renamed-components-00008",
          "xml-renamed-components-00009",
          "xml-renamed-components-00010",
          "xml-renamed-components-00011",
          "xml-renamed-components-00012",
          "xml-renamed-components-00013",
          "xml-renamed-components-00014",
          "xml-renamed-components-00015",
          "xml-renamed-components-00016",
          "xml-renamed-components-00017",
          "xml-renamed-components-00018",
          "xml-renamed-components-00021",
          "xml-renamed-components-00022",
          "xml-renamed-components-00025",
          "xml-renamed-components-00026",
        ],
      },
      {
        name: "discovery-rules",
        tags: [
          "EJB XML",
          "JPA XML",
          "Java Source",
          "Maven XML",
          "Properties",
          "Spring XML",
        ],
        unmatched: [
          "discover-license",
          "discover-manifest-file",
          "hardcoded-ip-address",
          "windup-discover-web-configuration",
        ],
      },
      {
        name: "droolsjbpm",
        description:
          "This ruleset provides help for migrating to a unified KIE (Knowledge Is Everything) API in the upgrade from version 5 to 6.",
        skipped: [
          "kie-api-01000",
          "kie-api-01001",
          "kie-api-01002",
          "kie-api-01003",
          "kie-api-01004",
          "kie-api-01005",
          "kie-api-01006",
          "kie-api-01007",
          "kie-api-01008",
          "kie-api-01009",
          "kie-api-01010",
          "kie-api-01011",
          "kie-api-01012",
          "kie-api-01013",
          "kie-api-01014",
          "kie-api-01015",
          "kie-api-01016",
        ],
      },
      {
        name: "eap8/eap7",
        description:
          "This ruleset provides analysis of Java EE applications that need to change certain CDI-related method calls.",
        violations: {
          "javaee-to-jakarta-namespaces-00001": {
            description:
              "Replace the Java EE namespace, schemaLocation and version with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24  \u003c/beans\u003e\n',
                lineNumber: 19,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24  \u003c/beans\u003e\n',
                lineNumber: 21,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24  \u003c/beans\u003e\n',
                lineNumber: 22,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/faces-config.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cfaces-config version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xi="http://www.w3.org/2001/XInclude"\n 19      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"\u003e\n 20  \n 21      \u003cnavigation-rule\u003e\n 22          \u003cfrom-view-id\u003e/index.xhtml\u003c/from-view-id\u003e\n 23          \u003cnavigation-case\u003e\n 24              \u003cfrom-action\u003e#{authController.authenticate(username)}\u003c/from-action\u003e\n 25              \u003cif\u003e#{authController.logged}\u003c/if\u003e\n 26              \u003cto-view-id\u003e/tasks.xhtml\u003c/to-view-id\u003e\n 27              \u003credirect /\u003e\n 28          \u003c/navigation-case\u003e\n 29      \u003c/navigation-rule\u003e\n 30  \n 31      \u003cnavigation-rule\u003e\n 32          \u003cfrom-view-id\u003e/tasks.xhtml\u003c/from-view-id\u003e\n 33          \u003cnavigation-case\u003e\n 34              \u003cfrom-action\u003e#{authController.logout}\u003c/from-action\u003e\n 35              \u003cif\u003e#{!authController.logged}\u003c/if\u003e\n 36              \u003cto-view-id\u003e/index.xhtml\u003c/to-view-id\u003e\n 37              \u003credirect /\u003e\n 38          \u003c/navigation-case\u003e\n 39      \u003c/navigation-rule\u003e\n 40  \n 41  \u003c/faces-config\u003e\n',
                lineNumber: 18,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/faces-config.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cfaces-config version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xi="http://www.w3.org/2001/XInclude"\n 19      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"\u003e\n 20  \n 21      \u003cnavigation-rule\u003e\n 22          \u003cfrom-view-id\u003e/index.xhtml\u003c/from-view-id\u003e\n 23          \u003cnavigation-case\u003e\n 24              \u003cfrom-action\u003e#{authController.authenticate(username)}\u003c/from-action\u003e\n 25              \u003cif\u003e#{authController.logged}\u003c/if\u003e\n 26              \u003cto-view-id\u003e/tasks.xhtml\u003c/to-view-id\u003e\n 27              \u003credirect /\u003e\n 28          \u003c/navigation-case\u003e\n 29      \u003c/navigation-rule\u003e\n 30  \n 31      \u003cnavigation-rule\u003e\n 32          \u003cfrom-view-id\u003e/tasks.xhtml\u003c/from-view-id\u003e\n 33          \u003cnavigation-case\u003e\n 34              \u003cfrom-action\u003e#{authController.logout}\u003c/from-action\u003e\n 35              \u003cif\u003e#{!authController.logged}\u003c/if\u003e\n 36              \u003cto-view-id\u003e/index.xhtml\u003c/to-view-id\u003e\n 37              \u003credirect /\u003e\n 38          \u003c/navigation-case\u003e\n 39      \u003c/navigation-rule\u003e\n 40  \n 41  \u003c/faces-config\u003e\n',
                lineNumber: 19,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/webapp/WEB-INF/beans.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24      \u003calternatives\u003e\n 25          \u003cstereotype\u003eorg.jboss.as.quickstarts.tasksJsf.Testing\u003c/stereotype\u003e\n 26      \u003c/alternatives\u003e\n 27  \u003c/beans\u003e\n',
                lineNumber: 19,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/webapp/WEB-INF/beans.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24      \u003calternatives\u003e\n 25          \u003cstereotype\u003eorg.jboss.as.quickstarts.tasksJsf.Testing\u003c/stereotype\u003e\n 26      \u003c/alternatives\u003e\n 27  \u003c/beans\u003e\n',
                lineNumber: 21,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/webapp/WEB-INF/beans.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24      \u003calternatives\u003e\n 25          \u003cstereotype\u003eorg.jboss.as.quickstarts.tasksJsf.Testing\u003c/stereotype\u003e\n 26      \u003c/alternatives\u003e\n 27  \u003c/beans\u003e\n',
                lineNumber: 22,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/javaee",
                },
              },
            ],
            links: [
              {
                url: "https://jakarta.ee/xml/ns/jakartaee/#10",
                title: "Jakarta EE XML Schemas",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-to-jakarta-namespaces-00002": {
            description:
              "Replace the Java EE persistence namespace, schemaLocation and version with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version="2.1"\n 19     xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20     xsi:schemaLocation="\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n 23     \u003cpersistence-unit name="primary"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n 33           \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n',
                lineNumber: 19,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version="2.1"\n 19     xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20     xsi:schemaLocation="\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n 23     \u003cpersistence-unit name="primary"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n 33           \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n',
                lineNumber: 21,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  "Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version="2.1"\n 19     xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20     xsi:schemaLocation="\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n 23     \u003cpersistence-unit name="primary"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n 33           \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n',
                lineNumber: 22,
                variables: {
                  matchingText: "http://xmlns.jcp.org/xml/ns/persistence",
                },
              },
            ],
            links: [
              {
                url: "https://jakarta.ee/xml/ns/persistence/#3",
                title: "Jakarta Persistence XML Schemas",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-to-jakarta-namespaces-00006": {
            description: "Replace the Java EE XSD with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml",
                message:
                  'Replace `beans_1_1.xsd` with `beans_3_0.xsd` and update the version attribute to `"3.0"`',
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24  \u003c/beans\u003e\n',
                lineNumber: 22,
                variables: { matchingText: "beans_1_1.xsd" },
              },
              {
                uri: "file:///tmp/source-code/src/test/webapp/WEB-INF/beans.xml",
                message:
                  'Replace `beans_1_1.xsd` with `beans_3_0.xsd` and update the version attribute to `"3.0"`',
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24      \u003calternatives\u003e\n 25          \u003cstereotype\u003eorg.jboss.as.quickstarts.tasksJsf.Testing\u003c/stereotype\u003e\n 26      \u003c/alternatives\u003e\n 27  \u003c/beans\u003e\n',
                lineNumber: 22,
                variables: { matchingText: "beans_1_1.xsd" },
              },
            ],
            links: [
              {
                url: "https://jakarta.ee/xml/ns/jakartaee/#9",
                title: "Jakarta XML Schemas",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-to-jakarta-namespaces-00021": {
            description: "Replace the Java EE XSD with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/faces-config.xml",
                message:
                  'Replace `web-facesconfig_2_2.xsd` with `web-facesconfig_3_0.xsd` and update the version attribute to `"3.0"`',
                codeSnip:
                  '  1  \u003c?xml version="1.0"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cfaces-config version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xi="http://www.w3.org/2001/XInclude"\n 19      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"\u003e\n 20  \n 21      \u003cnavigation-rule\u003e\n 22          \u003cfrom-view-id\u003e/index.xhtml\u003c/from-view-id\u003e\n 23          \u003cnavigation-case\u003e\n 24              \u003cfrom-action\u003e#{authController.authenticate(username)}\u003c/from-action\u003e\n 25              \u003cif\u003e#{authController.logged}\u003c/if\u003e\n 26              \u003cto-view-id\u003e/tasks.xhtml\u003c/to-view-id\u003e\n 27              \u003credirect /\u003e\n 28          \u003c/navigation-case\u003e\n 29      \u003c/navigation-rule\u003e\n 30  \n 31      \u003cnavigation-rule\u003e\n 32          \u003cfrom-view-id\u003e/tasks.xhtml\u003c/from-view-id\u003e\n 33          \u003cnavigation-case\u003e\n 34              \u003cfrom-action\u003e#{authController.logout}\u003c/from-action\u003e\n 35              \u003cif\u003e#{!authController.logged}\u003c/if\u003e\n 36              \u003cto-view-id\u003e/index.xhtml\u003c/to-view-id\u003e\n 37              \u003credirect /\u003e\n 38          \u003c/navigation-case\u003e\n 39      \u003c/navigation-rule\u003e\n 40  \n 41  \u003c/faces-config\u003e\n',
                lineNumber: 19,
                variables: { matchingText: "web-facesconfig_2_2.xsd" },
              },
            ],
            links: [
              {
                url: "https://jakarta.ee/xml/ns/jakartaee/#9",
                title: "Jakarta XML Schemas",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-to-jakarta-namespaces-00030": {
            description: "Replace the Java EE XSD with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  'Replace `persistence_2_1.xsd` with `persistence_3_0.xsd` and update the version attribute to `"3.0"`',
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version="2.1"\n 19     xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20     xsi:schemaLocation="\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n 23     \u003cpersistence-unit name="primary"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n 33           \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n',
                lineNumber: 22,
                variables: { matchingText: "persistence_2_1.xsd" },
              },
            ],
            links: [
              {
                url: "https://jakarta.ee/xml/ns/jakartaee/#9",
                title: "Jakarta XML Schemas",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-to-jakarta-namespaces-00033": {
            description:
              "Replace the Java EE version with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  "In the root tag, replace the `version` attribute value `2.1` with `3.0`",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version="2.1"\n 19     xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20     xsi:schemaLocation="\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n 23     \u003cpersistence-unit name="primary"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n 33           \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n',
                lineNumber: 18,
                variables: { matchingText: 'version="2.1"' },
              },
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  "In the root tag, replace the `version` attribute value `2.1` with `3.0`",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version="2.1"\n 19     xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20     xsi:schemaLocation="\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n 23     \u003cpersistence-unit name="primary"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n 33           \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n',
                lineNumber: 29,
                variables: {
                  data: "persistence",
                  innerText:
                    "\n   \n      \n      \n      java:jboss/datasources/TasksJsfQuickstartDS\n      \n         \n         \n         \n      \n   \n",
                  matchingXML:
                    '\u003cpersistence-unit name="primary"\u003e\u003c!-- We use a different datasource for tests, so as to not overwrite\n         production data. This is an unmanaged data source, backed by H2, an in memory\n         database. Production applications should use a managed datasource. --\u003e\u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n         you can find it in the source at src/test/resources/test-ds.xml --\u003e\u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\u003cproperties\u003e\u003c!-- Properties for Hibernate --\u003e\u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop"\u003e\u003c/property\u003e\u003cproperty name="hibernate.show_sql" value="false"\u003e\u003c/property\u003e\u003c/properties\u003e\u003c/persistence-unit\u003e',
                },
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-to-jakarta-namespaces-00048": {
            description:
              "Replace the Java EE version with the Jakarta equivalent",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/faces-config.xml",
                message:
                  "`web-facesconfig_2_2`: In the root tag, replace the `version` attribute value with `3.0`",
                codeSnip:
                  '  1  \u003c?xml version="1.0"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cfaces-config version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xi="http://www.w3.org/2001/XInclude"\n 19      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"\u003e\n 20  \n 21      \u003cnavigation-rule\u003e\n 22          \u003cfrom-view-id\u003e/index.xhtml\u003c/from-view-id\u003e\n 23          \u003cnavigation-case\u003e\n 24              \u003cfrom-action\u003e#{authController.authenticate(username)}\u003c/from-action\u003e\n 25              \u003cif\u003e#{authController.logged}\u003c/if\u003e\n 26              \u003cto-view-id\u003e/tasks.xhtml\u003c/to-view-id\u003e\n 27              \u003credirect /\u003e\n 28          \u003c/navigation-case\u003e\n 29      \u003c/navigation-rule\u003e\n 30  \n 31      \u003cnavigation-rule\u003e\n 32          \u003cfrom-view-id\u003e/tasks.xhtml\u003c/from-view-id\u003e\n 33          \u003cnavigation-case\u003e\n 34              \u003cfrom-action\u003e#{authController.logout}\u003c/from-action\u003e\n 35              \u003cif\u003e#{!authController.logged}\u003c/if\u003e\n 36              \u003cto-view-id\u003e/index.xhtml\u003c/to-view-id\u003e\n 37              \u003credirect /\u003e\n 38          \u003c/navigation-case\u003e\n 39      \u003c/navigation-rule\u003e\n 40  \n 41  \u003c/faces-config\u003e\n',
                lineNumber: 18,
                variables: { matchingText: 'version="2.2"' },
              },
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/faces-config.xml",
                message:
                  "`web-facesconfig_2_2`: In the root tag, replace the `version` attribute value with `3.0`",
                codeSnip:
                  '  1  \u003c?xml version="1.0"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cfaces-config version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xi="http://www.w3.org/2001/XInclude"\n 19      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"\u003e\n 20  \n 21      \u003cnavigation-rule\u003e\n 22          \u003cfrom-view-id\u003e/index.xhtml\u003c/from-view-id\u003e\n 23          \u003cnavigation-case\u003e\n 24              \u003cfrom-action\u003e#{authController.authenticate(username)}\u003c/from-action\u003e\n 25              \u003cif\u003e#{authController.logged}\u003c/if\u003e\n 26              \u003cto-view-id\u003e/tasks.xhtml\u003c/to-view-id\u003e\n 27              \u003credirect /\u003e\n 28          \u003c/navigation-case\u003e\n 29      \u003c/navigation-rule\u003e\n 30  \n 31      \u003cnavigation-rule\u003e\n 32          \u003cfrom-view-id\u003e/tasks.xhtml\u003c/from-view-id\u003e\n 33          \u003cnavigation-case\u003e\n 34              \u003cfrom-action\u003e#{authController.logout}\u003c/from-action\u003e\n 35              \u003cif\u003e#{!authController.logged}\u003c/if\u003e\n 36              \u003cto-view-id\u003e/index.xhtml\u003c/to-view-id\u003e\n 37              \u003credirect /\u003e\n 38          \u003c/navigation-case\u003e\n 39      \u003c/navigation-rule\u003e\n 40  \n 41  \u003c/faces-config\u003e\n',
                lineNumber: 22,
                variables: {
                  data: "faces-config",
                  innerText:
                    "\n\n    \n        /index.xhtml\n        \n            #{authController.authenticate(username)}\n            #{authController.logged}\n            /tasks.xhtml\n            \n        \n    \n\n    \n        /tasks.xhtml\n        \n            #{authController.logout}\n            #{!authController.logged}\n            /index.xhtml\n            \n        \n    \n\n",
                  matchingXML:
                    "\u003cnavigation-rule\u003e\u003cfrom-view-id\u003e/index.xhtml\u003c/from-view-id\u003e\u003cnavigation-case\u003e\u003cfrom-action\u003e#{authController.authenticate(username)}\u003c/from-action\u003e\u003cif\u003e#{authController.logged}\u003c/if\u003e\u003cto-view-id\u003e/tasks.xhtml\u003c/to-view-id\u003e\u003credirect\u003e\u003c/redirect\u003e\u003c/navigation-case\u003e\u003c/navigation-rule\u003e\u003cnavigation-rule\u003e\u003cfrom-view-id\u003e/tasks.xhtml\u003c/from-view-id\u003e\u003cnavigation-case\u003e\u003cfrom-action\u003e#{authController.logout}\u003c/from-action\u003e\u003cif\u003e#{!authController.logged}\u003c/if\u003e\u003cto-view-id\u003e/index.xhtml\u003c/to-view-id\u003e\u003credirect\u003e\u003c/redirect\u003e\u003c/navigation-case\u003e\u003c/navigation-rule\u003e",
                },
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javax-to-jakarta-import-00001": {
            description: "The package 'javax' has been replaced by 'jakarta'.",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));',
                lineNumber: 19,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.enterprise.context.Conversation",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;',
                lineNumber: 20,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.enterprise.context.RequestScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;\n121          }',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;\n121          }\n122      }',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.faces.application.FacesMessage",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;\n121          }\n122      }\n123  }',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.faces.context.FacesContext",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;\n121          }\n122      }\n123  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;\n121          }\n122      }\n123  }\n',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Module",
                  name: "javax.inject.Named",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Authentication.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.enterprise.context.ConversationScoped;\n 22  \n 23  /**\n 24   * Store for current authenticated user\n 25   *\n 26   * @author Lukas Fryc\n 27   *\n 28   */\n 29  @SuppressWarnings("serial")\n 30  @ConversationScoped\n 31  public class Authentication implements Serializable {\n 32  \n 33      private User currentUser;\n 34  \n 35      public User getCurrentUser() {\n 36          return currentUser;\n 37      }\n 38  \n 39      public void setCurrentUser(User user) {\n 40          currentUser = user;\n 41      }\n 42  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Authentication.java",
                  kind: "Module",
                  name: "javax.enterprise.context.ConversationScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTask.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.lang.annotation.ElementType;\n 20  import java.lang.annotation.Retention;\n 21  import java.lang.annotation.RetentionPolicy;\n 22  import java.lang.annotation.Target;\n 23  \n 24  import javax.inject.Qualifier;\n 25  \n 26  /**\n 27   * Qualifier for current task\n 28   *\n 29   * @author Lukas Fryc\n 30   *\n 31   */\n 32  @Qualifier\n 33  @Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })\n 34  @Retention(RetentionPolicy.RUNTIME)\n 35  public @interface CurrentTask {\n 36  \n 37  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTask.java",
                  kind: "Module",
                  name: "javax.inject.Qualifier",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.enterprise.context.ConversationScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Holds current task in context of conversation\n 28   * \u003c/p\u003e\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @ConversationScoped\n 35  public class CurrentTaskStore implements Serializable {\n 36  \n 37      private Task currentTask;\n 38  \n 39      /**\n 40       * \u003cp\u003e\n 41       * Provides current task to the context available for injection using:\n 42       * \u003c/p\u003e\n 43       *\n 44       * \u003cp\u003e\n 45       * \u003ccode\u003e@Inject @CurrentTask currentTask;\u003c/code\u003e\n 46       * \u003c/p\u003e\n 47       *\n 48       * \u003cp\u003e\n 49       * or from the Expression Language context using an expression \u003ccode\u003e#{currentTask}\u003c/code\u003e.\n 50       * \u003c/p\u003e\n 51       *\n 52       * @return current authenticated user\n 53       */\n 54      @Produces\n 55      @CurrentTask\n 56      @Named("currentTask")\n 57      public Task get() {\n 58          return currentTask;\n 59      }\n 60  \n 61      /**\n 62       * Setup current task\n 63       *\n 64       * @param currentTask task to setup as current\n 65       */\n 66      public void set(Task currentTask) {\n 67          this.currentTask = currentTask;\n 68      }\n 69  \n 70      public void unset() {\n 71          this.currentTask = null;\n 72      }\n 73  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                  kind: "Module",
                  name: "javax.enterprise.context.ConversationScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.enterprise.context.ConversationScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Holds current task in context of conversation\n 28   * \u003c/p\u003e\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @ConversationScoped\n 35  public class CurrentTaskStore implements Serializable {\n 36  \n 37      private Task currentTask;\n 38  \n 39      /**\n 40       * \u003cp\u003e\n 41       * Provides current task to the context available for injection using:\n 42       * \u003c/p\u003e\n 43       *\n 44       * \u003cp\u003e\n 45       * \u003ccode\u003e@Inject @CurrentTask currentTask;\u003c/code\u003e\n 46       * \u003c/p\u003e\n 47       *\n 48       * \u003cp\u003e\n 49       * or from the Expression Language context using an expression \u003ccode\u003e#{currentTask}\u003c/code\u003e.\n 50       * \u003c/p\u003e\n 51       *\n 52       * @return current authenticated user\n 53       */\n 54      @Produces\n 55      @CurrentTask\n 56      @Named("currentTask")\n 57      public Task get() {\n 58          return currentTask;\n 59      }\n 60  \n 61      /**\n 62       * Setup current task\n 63       *\n 64       * @param currentTask task to setup as current\n 65       */\n 66      public void set(Task currentTask) {\n 67          this.currentTask = currentTask;\n 68      }\n 69  \n 70      public void unset() {\n 71          this.currentTask = null;\n 72      }\n 73  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.enterprise.context.ConversationScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Holds current task in context of conversation\n 28   * \u003c/p\u003e\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @ConversationScoped\n 35  public class CurrentTaskStore implements Serializable {\n 36  \n 37      private Task currentTask;\n 38  \n 39      /**\n 40       * \u003cp\u003e\n 41       * Provides current task to the context available for injection using:\n 42       * \u003c/p\u003e\n 43       *\n 44       * \u003cp\u003e\n 45       * \u003ccode\u003e@Inject @CurrentTask currentTask;\u003c/code\u003e\n 46       * \u003c/p\u003e\n 47       *\n 48       * \u003cp\u003e\n 49       * or from the Expression Language context using an expression \u003ccode\u003e#{currentTask}\u003c/code\u003e.\n 50       * \u003c/p\u003e\n 51       *\n 52       * @return current authenticated user\n 53       */\n 54      @Produces\n 55      @CurrentTask\n 56      @Named("currentTask")\n 57      public Task get() {\n 58          return currentTask;\n 59      }\n 60  \n 61      /**\n 62       * Setup current task\n 63       *\n 64       * @param currentTask task to setup as current\n 65       */\n 66      public void set(Task currentTask) {\n 67          this.currentTask = currentTask;\n 68      }\n 69  \n 70      public void unset() {\n 71          this.currentTask = null;\n 72      }\n 73  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                  kind: "Module",
                  name: "javax.inject.Named",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentUser.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.lang.annotation.ElementType;\n 20  import java.lang.annotation.Retention;\n 21  import java.lang.annotation.RetentionPolicy;\n 22  import java.lang.annotation.Target;\n 23  \n 24  import javax.inject.Qualifier;\n 25  \n 26  /**\n 27   * Qualifier for current user\n 28   *\n 29   * @author Lukas Fryc\n 30   *\n 31   */\n 32  @Qualifier\n 33  @Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })\n 34  @Retention(RetentionPolicy.RUNTIME)\n 35  public @interface CurrentUser {\n 36  \n 37  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentUser.java",
                  kind: "Module",
                  name: "javax.inject.Qualifier",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.ejb` import statement with `jakarta.ejb` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.ejb.Stateful",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "ejb",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.enterprise.context.RequestScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.spi.InjectionPoint",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.faces.context.FacesContext",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 26,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 27,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.persistence.PersistenceContext",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 28,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.persistence.PersistenceContextType",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.GenerationType.IDENTITY;\n 20  \n 21  import java.io.Serializable;\n 22  \n 23  import javax.persistence.Entity;\n 24  import javax.persistence.GeneratedValue;\n 25  import javax.persistence.Id;\n 26  import javax.persistence.ManyToOne;\n 27  \n 28  /**\n 29   * User\'s task entity\n 30   *\n 31   * @author Oliver Kiss\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @Entity\n 35  public class Task implements Serializable {\n 36  \n 37      @Id\n 38      @GeneratedValue(strategy = IDENTITY)\n 39      private Long id;\n 40  \n 41      @ManyToOne\n 42      private User owner;\n 43  \n 44      private String title;\n 45  \n 46      public Task() {\n 47      }\n 48  \n 49      public Task(String title) {\n 50          super();\n 51          this.title = title;\n 52      }\n 53  \n 54      public Long getId() {\n 55          return id;\n 56      }\n 57  \n 58      public void setId(Long id) {\n 59          this.id = id;\n 60      }\n 61  \n 62      public User getOwner() {\n 63          return owner;\n 64      }\n 65  \n 66      public void setOwner(User owner) {\n 67          this.owner = owner;\n 68      }\n 69  \n 70      public String getTitle() {\n 71          return title;\n 72      }\n 73  \n 74      public void setTitle(String title) {\n 75          this.title = title;\n 76      }\n 77  \n 78      @Override\n 79      public int hashCode() {\n 80          final int prime = 31;\n 81          int result = 1;\n 82          result = prime * result + ((owner == null) ? 0 : owner.hashCode());\n 83          result = prime * result + ((title == null) ? 0 : title.hashCode());\n 84          return result;\n 85      }\n 86  \n 87      @Override\n 88      public boolean equals(Object obj) {\n 89          if (this == obj) {\n 90              return true;\n 91          }\n 92          if (obj == null) {\n 93              return false;\n 94          }\n 95          if (getClass() != obj.getClass()) {\n 96              return false;\n 97          }\n 98          Task other = (Task) obj;\n 99          if (owner == null) {\n100              if (other.owner != null) {\n101                  return false;\n102              }\n103          } else if (!owner.equals(other.owner)) {\n104              return false;\n105          }\n106          if (title == null) {\n107              if (other.title != null) {\n108                  return false;\n109              }\n110          } else if (!title.equals(other.title)) {\n111              return false;\n112          }\n113          return true;\n114      }\n115  \n116  }\n',
                lineNumber: 19,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                  kind: "Module",
                  name: "javax.persistence.GenerationType.IDENTITY",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.GenerationType.IDENTITY;\n 20  \n 21  import java.io.Serializable;\n 22  \n 23  import javax.persistence.Entity;\n 24  import javax.persistence.GeneratedValue;\n 25  import javax.persistence.Id;\n 26  import javax.persistence.ManyToOne;\n 27  \n 28  /**\n 29   * User\'s task entity\n 30   *\n 31   * @author Oliver Kiss\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @Entity\n 35  public class Task implements Serializable {\n 36  \n 37      @Id\n 38      @GeneratedValue(strategy = IDENTITY)\n 39      private Long id;\n 40  \n 41      @ManyToOne\n 42      private User owner;\n 43  \n 44      private String title;\n 45  \n 46      public Task() {\n 47      }\n 48  \n 49      public Task(String title) {\n 50          super();\n 51          this.title = title;\n 52      }\n 53  \n 54      public Long getId() {\n 55          return id;\n 56      }\n 57  \n 58      public void setId(Long id) {\n 59          this.id = id;\n 60      }\n 61  \n 62      public User getOwner() {\n 63          return owner;\n 64      }\n 65  \n 66      public void setOwner(User owner) {\n 67          this.owner = owner;\n 68      }\n 69  \n 70      public String getTitle() {\n 71          return title;\n 72      }\n 73  \n 74      public void setTitle(String title) {\n 75          this.title = title;\n 76      }\n 77  \n 78      @Override\n 79      public int hashCode() {\n 80          final int prime = 31;\n 81          int result = 1;\n 82          result = prime * result + ((owner == null) ? 0 : owner.hashCode());\n 83          result = prime * result + ((title == null) ? 0 : title.hashCode());\n 84          return result;\n 85      }\n 86  \n 87      @Override\n 88      public boolean equals(Object obj) {\n 89          if (this == obj) {\n 90              return true;\n 91          }\n 92          if (obj == null) {\n 93              return false;\n 94          }\n 95          if (getClass() != obj.getClass()) {\n 96              return false;\n 97          }\n 98          Task other = (Task) obj;\n 99          if (owner == null) {\n100              if (other.owner != null) {\n101                  return false;\n102              }\n103          } else if (!owner.equals(other.owner)) {\n104              return false;\n105          }\n106          if (title == null) {\n107              if (other.title != null) {\n108                  return false;\n109              }\n110          } else if (!title.equals(other.title)) {\n111              return false;\n112          }\n113          return true;\n114      }\n115  \n116  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                  kind: "Module",
                  name: "javax.persistence.Entity",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.GenerationType.IDENTITY;\n 20  \n 21  import java.io.Serializable;\n 22  \n 23  import javax.persistence.Entity;\n 24  import javax.persistence.GeneratedValue;\n 25  import javax.persistence.Id;\n 26  import javax.persistence.ManyToOne;\n 27  \n 28  /**\n 29   * User\'s task entity\n 30   *\n 31   * @author Oliver Kiss\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @Entity\n 35  public class Task implements Serializable {\n 36  \n 37      @Id\n 38      @GeneratedValue(strategy = IDENTITY)\n 39      private Long id;\n 40  \n 41      @ManyToOne\n 42      private User owner;\n 43  \n 44      private String title;\n 45  \n 46      public Task() {\n 47      }\n 48  \n 49      public Task(String title) {\n 50          super();\n 51          this.title = title;\n 52      }\n 53  \n 54      public Long getId() {\n 55          return id;\n 56      }\n 57  \n 58      public void setId(Long id) {\n 59          this.id = id;\n 60      }\n 61  \n 62      public User getOwner() {\n 63          return owner;\n 64      }\n 65  \n 66      public void setOwner(User owner) {\n 67          this.owner = owner;\n 68      }\n 69  \n 70      public String getTitle() {\n 71          return title;\n 72      }\n 73  \n 74      public void setTitle(String title) {\n 75          this.title = title;\n 76      }\n 77  \n 78      @Override\n 79      public int hashCode() {\n 80          final int prime = 31;\n 81          int result = 1;\n 82          result = prime * result + ((owner == null) ? 0 : owner.hashCode());\n 83          result = prime * result + ((title == null) ? 0 : title.hashCode());\n 84          return result;\n 85      }\n 86  \n 87      @Override\n 88      public boolean equals(Object obj) {\n 89          if (this == obj) {\n 90              return true;\n 91          }\n 92          if (obj == null) {\n 93              return false;\n 94          }\n 95          if (getClass() != obj.getClass()) {\n 96              return false;\n 97          }\n 98          Task other = (Task) obj;\n 99          if (owner == null) {\n100              if (other.owner != null) {\n101                  return false;\n102              }\n103          } else if (!owner.equals(other.owner)) {\n104              return false;\n105          }\n106          if (title == null) {\n107              if (other.title != null) {\n108                  return false;\n109              }\n110          } else if (!title.equals(other.title)) {\n111              return false;\n112          }\n113          return true;\n114      }\n115  \n116  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                  kind: "Module",
                  name: "javax.persistence.GeneratedValue",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.GenerationType.IDENTITY;\n 20  \n 21  import java.io.Serializable;\n 22  \n 23  import javax.persistence.Entity;\n 24  import javax.persistence.GeneratedValue;\n 25  import javax.persistence.Id;\n 26  import javax.persistence.ManyToOne;\n 27  \n 28  /**\n 29   * User\'s task entity\n 30   *\n 31   * @author Oliver Kiss\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @Entity\n 35  public class Task implements Serializable {\n 36  \n 37      @Id\n 38      @GeneratedValue(strategy = IDENTITY)\n 39      private Long id;\n 40  \n 41      @ManyToOne\n 42      private User owner;\n 43  \n 44      private String title;\n 45  \n 46      public Task() {\n 47      }\n 48  \n 49      public Task(String title) {\n 50          super();\n 51          this.title = title;\n 52      }\n 53  \n 54      public Long getId() {\n 55          return id;\n 56      }\n 57  \n 58      public void setId(Long id) {\n 59          this.id = id;\n 60      }\n 61  \n 62      public User getOwner() {\n 63          return owner;\n 64      }\n 65  \n 66      public void setOwner(User owner) {\n 67          this.owner = owner;\n 68      }\n 69  \n 70      public String getTitle() {\n 71          return title;\n 72      }\n 73  \n 74      public void setTitle(String title) {\n 75          this.title = title;\n 76      }\n 77  \n 78      @Override\n 79      public int hashCode() {\n 80          final int prime = 31;\n 81          int result = 1;\n 82          result = prime * result + ((owner == null) ? 0 : owner.hashCode());\n 83          result = prime * result + ((title == null) ? 0 : title.hashCode());\n 84          return result;\n 85      }\n 86  \n 87      @Override\n 88      public boolean equals(Object obj) {\n 89          if (this == obj) {\n 90              return true;\n 91          }\n 92          if (obj == null) {\n 93              return false;\n 94          }\n 95          if (getClass() != obj.getClass()) {\n 96              return false;\n 97          }\n 98          Task other = (Task) obj;\n 99          if (owner == null) {\n100              if (other.owner != null) {\n101                  return false;\n102              }\n103          } else if (!owner.equals(other.owner)) {\n104              return false;\n105          }\n106          if (title == null) {\n107              if (other.title != null) {\n108                  return false;\n109              }\n110          } else if (!title.equals(other.title)) {\n111              return false;\n112          }\n113          return true;\n114      }\n115  \n116  }\n',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                  kind: "Module",
                  name: "javax.persistence.Id",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.GenerationType.IDENTITY;\n 20  \n 21  import java.io.Serializable;\n 22  \n 23  import javax.persistence.Entity;\n 24  import javax.persistence.GeneratedValue;\n 25  import javax.persistence.Id;\n 26  import javax.persistence.ManyToOne;\n 27  \n 28  /**\n 29   * User\'s task entity\n 30   *\n 31   * @author Oliver Kiss\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @Entity\n 35  public class Task implements Serializable {\n 36  \n 37      @Id\n 38      @GeneratedValue(strategy = IDENTITY)\n 39      private Long id;\n 40  \n 41      @ManyToOne\n 42      private User owner;\n 43  \n 44      private String title;\n 45  \n 46      public Task() {\n 47      }\n 48  \n 49      public Task(String title) {\n 50          super();\n 51          this.title = title;\n 52      }\n 53  \n 54      public Long getId() {\n 55          return id;\n 56      }\n 57  \n 58      public void setId(Long id) {\n 59          this.id = id;\n 60      }\n 61  \n 62      public User getOwner() {\n 63          return owner;\n 64      }\n 65  \n 66      public void setOwner(User owner) {\n 67          this.owner = owner;\n 68      }\n 69  \n 70      public String getTitle() {\n 71          return title;\n 72      }\n 73  \n 74      public void setTitle(String title) {\n 75          this.title = title;\n 76      }\n 77  \n 78      @Override\n 79      public int hashCode() {\n 80          final int prime = 31;\n 81          int result = 1;\n 82          result = prime * result + ((owner == null) ? 0 : owner.hashCode());\n 83          result = prime * result + ((title == null) ? 0 : title.hashCode());\n 84          return result;\n 85      }\n 86  \n 87      @Override\n 88      public boolean equals(Object obj) {\n 89          if (this == obj) {\n 90              return true;\n 91          }\n 92          if (obj == null) {\n 93              return false;\n 94          }\n 95          if (getClass() != obj.getClass()) {\n 96              return false;\n 97          }\n 98          Task other = (Task) obj;\n 99          if (owner == null) {\n100              if (other.owner != null) {\n101                  return false;\n102              }\n103          } else if (!owner.equals(other.owner)) {\n104              return false;\n105          }\n106          if (title == null) {\n107              if (other.title != null) {\n108                  return false;\n109              }\n110          } else if (!title.equals(other.title)) {\n111              return false;\n112          }\n113          return true;\n114      }\n115  \n116  }\n',
                lineNumber: 26,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Task.java",
                  kind: "Module",
                  name: "javax.persistence.ManyToOne",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.RequestScoped;\n 20  import javax.enterprise.inject.Instance;\n 21  import javax.inject.Inject;\n 22  import javax.inject.Named;\n 23  \n 24  /**\n 25   * \u003cp\u003e\n 26   * Basic operations for tasks owned by current user - additions, deletions/\n 27   * \u003c/p\u003e\n 28   *\n 29   * @author Lukas Fryc\n 30   *\n 31   */\n 32  @RequestScoped\n 33  @Named\n 34  public class TaskController {\n 35  \n 36      @Inject\n 37      private TaskDao taskDao;\n 38  \n 39      @Inject\n 40      private TaskList taskList;\n 41  \n 42      /**\n 43       * Injects current user, which is provided by {@link AuthController}.\n 44       */\n 45      @Inject\n 46      @CurrentUser\n 47      private Instance\u003cUser\u003e currentUser;\n 48  \n 49      /**\n 50       * Injects current user stored in the conversation scope\n 51       */\n 52      @Inject\n 53      private CurrentTaskStore currentTaskStore;\n 54  \n 55      /**\n 56       * Set the current task to the context\n 57       *\n 58       * @param task current task to be set to context\n 59       */\n 60      public void setCurrentTask(Task task) {\n 61          currentTaskStore.set(task);\n 62      }\n 63  \n 64      /**\n 65       * Creates new task and, if no task is selected as current, selects it.\n 66       *\n 67       * @param taskTitle\n 68       */\n 69      public void createTask(String taskTitle) {\n 70          taskList.invalidate();\n 71          Task task = new Task(taskTitle);\n 72          taskDao.createTask(currentUser.get(), task);\n 73          if (currentTaskStore.get() == null) {\n 74              currentTaskStore.set(task);\n 75          }\n 76      }\n 77  \n 78      /**\n 79       * Deletes given task\n 80       *\n 81       * @param task to delete\n 82       */\n 83      public void deleteTask(Task task) {\n 84          taskList.invalidate();\n 85          if (task.equals(currentTaskStore.get())) {\n 86              currentTaskStore.unset();\n 87          }\n 88          taskDao.deleteTask(task);\n 89      }\n 90  \n 91      /**\n 92       * Deletes given task\n 93       *\n 94       * @param task to delete\n 95       */\n 96      public void deleteCurrentTask() {\n 97          deleteTask(currentTaskStore.get());\n 98      }\n 99  }\n',
                lineNumber: 19,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                  kind: "Module",
                  name: "javax.enterprise.context.RequestScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.RequestScoped;\n 20  import javax.enterprise.inject.Instance;\n 21  import javax.inject.Inject;\n 22  import javax.inject.Named;\n 23  \n 24  /**\n 25   * \u003cp\u003e\n 26   * Basic operations for tasks owned by current user - additions, deletions/\n 27   * \u003c/p\u003e\n 28   *\n 29   * @author Lukas Fryc\n 30   *\n 31   */\n 32  @RequestScoped\n 33  @Named\n 34  public class TaskController {\n 35  \n 36      @Inject\n 37      private TaskDao taskDao;\n 38  \n 39      @Inject\n 40      private TaskList taskList;\n 41  \n 42      /**\n 43       * Injects current user, which is provided by {@link AuthController}.\n 44       */\n 45      @Inject\n 46      @CurrentUser\n 47      private Instance\u003cUser\u003e currentUser;\n 48  \n 49      /**\n 50       * Injects current user stored in the conversation scope\n 51       */\n 52      @Inject\n 53      private CurrentTaskStore currentTaskStore;\n 54  \n 55      /**\n 56       * Set the current task to the context\n 57       *\n 58       * @param task current task to be set to context\n 59       */\n 60      public void setCurrentTask(Task task) {\n 61          currentTaskStore.set(task);\n 62      }\n 63  \n 64      /**\n 65       * Creates new task and, if no task is selected as current, selects it.\n 66       *\n 67       * @param taskTitle\n 68       */\n 69      public void createTask(String taskTitle) {\n 70          taskList.invalidate();\n 71          Task task = new Task(taskTitle);\n 72          taskDao.createTask(currentUser.get(), task);\n 73          if (currentTaskStore.get() == null) {\n 74              currentTaskStore.set(task);\n 75          }\n 76      }\n 77  \n 78      /**\n 79       * Deletes given task\n 80       *\n 81       * @param task to delete\n 82       */\n 83      public void deleteTask(Task task) {\n 84          taskList.invalidate();\n 85          if (task.equals(currentTaskStore.get())) {\n 86              currentTaskStore.unset();\n 87          }\n 88          taskDao.deleteTask(task);\n 89      }\n 90  \n 91      /**\n 92       * Deletes given task\n 93       *\n 94       * @param task to delete\n 95       */\n 96      public void deleteCurrentTask() {\n 97          deleteTask(currentTaskStore.get());\n 98      }\n 99  }\n',
                lineNumber: 20,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Instance",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.RequestScoped;\n 20  import javax.enterprise.inject.Instance;\n 21  import javax.inject.Inject;\n 22  import javax.inject.Named;\n 23  \n 24  /**\n 25   * \u003cp\u003e\n 26   * Basic operations for tasks owned by current user - additions, deletions/\n 27   * \u003c/p\u003e\n 28   *\n 29   * @author Lukas Fryc\n 30   *\n 31   */\n 32  @RequestScoped\n 33  @Named\n 34  public class TaskController {\n 35  \n 36      @Inject\n 37      private TaskDao taskDao;\n 38  \n 39      @Inject\n 40      private TaskList taskList;\n 41  \n 42      /**\n 43       * Injects current user, which is provided by {@link AuthController}.\n 44       */\n 45      @Inject\n 46      @CurrentUser\n 47      private Instance\u003cUser\u003e currentUser;\n 48  \n 49      /**\n 50       * Injects current user stored in the conversation scope\n 51       */\n 52      @Inject\n 53      private CurrentTaskStore currentTaskStore;\n 54  \n 55      /**\n 56       * Set the current task to the context\n 57       *\n 58       * @param task current task to be set to context\n 59       */\n 60      public void setCurrentTask(Task task) {\n 61          currentTaskStore.set(task);\n 62      }\n 63  \n 64      /**\n 65       * Creates new task and, if no task is selected as current, selects it.\n 66       *\n 67       * @param taskTitle\n 68       */\n 69      public void createTask(String taskTitle) {\n 70          taskList.invalidate();\n 71          Task task = new Task(taskTitle);\n 72          taskDao.createTask(currentUser.get(), task);\n 73          if (currentTaskStore.get() == null) {\n 74              currentTaskStore.set(task);\n 75          }\n 76      }\n 77  \n 78      /**\n 79       * Deletes given task\n 80       *\n 81       * @param task to delete\n 82       */\n 83      public void deleteTask(Task task) {\n 84          taskList.invalidate();\n 85          if (task.equals(currentTaskStore.get())) {\n 86              currentTaskStore.unset();\n 87          }\n 88          taskDao.deleteTask(task);\n 89      }\n 90  \n 91      /**\n 92       * Deletes given task\n 93       *\n 94       * @param task to delete\n 95       */\n 96      public void deleteCurrentTask() {\n 97          deleteTask(currentTaskStore.get());\n 98      }\n 99  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.RequestScoped;\n 20  import javax.enterprise.inject.Instance;\n 21  import javax.inject.Inject;\n 22  import javax.inject.Named;\n 23  \n 24  /**\n 25   * \u003cp\u003e\n 26   * Basic operations for tasks owned by current user - additions, deletions/\n 27   * \u003c/p\u003e\n 28   *\n 29   * @author Lukas Fryc\n 30   *\n 31   */\n 32  @RequestScoped\n 33  @Named\n 34  public class TaskController {\n 35  \n 36      @Inject\n 37      private TaskDao taskDao;\n 38  \n 39      @Inject\n 40      private TaskList taskList;\n 41  \n 42      /**\n 43       * Injects current user, which is provided by {@link AuthController}.\n 44       */\n 45      @Inject\n 46      @CurrentUser\n 47      private Instance\u003cUser\u003e currentUser;\n 48  \n 49      /**\n 50       * Injects current user stored in the conversation scope\n 51       */\n 52      @Inject\n 53      private CurrentTaskStore currentTaskStore;\n 54  \n 55      /**\n 56       * Set the current task to the context\n 57       *\n 58       * @param task current task to be set to context\n 59       */\n 60      public void setCurrentTask(Task task) {\n 61          currentTaskStore.set(task);\n 62      }\n 63  \n 64      /**\n 65       * Creates new task and, if no task is selected as current, selects it.\n 66       *\n 67       * @param taskTitle\n 68       */\n 69      public void createTask(String taskTitle) {\n 70          taskList.invalidate();\n 71          Task task = new Task(taskTitle);\n 72          taskDao.createTask(currentUser.get(), task);\n 73          if (currentTaskStore.get() == null) {\n 74              currentTaskStore.set(task);\n 75          }\n 76      }\n 77  \n 78      /**\n 79       * Deletes given task\n 80       *\n 81       * @param task to delete\n 82       */\n 83      public void deleteTask(Task task) {\n 84          taskList.invalidate();\n 85          if (task.equals(currentTaskStore.get())) {\n 86              currentTaskStore.unset();\n 87          }\n 88          taskDao.deleteTask(task);\n 89      }\n 90  \n 91      /**\n 92       * Deletes given task\n 93       *\n 94       * @param task to delete\n 95       */\n 96      public void deleteCurrentTask() {\n 97          deleteTask(currentTaskStore.get());\n 98      }\n 99  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskController.java",
                  kind: "Module",
                  name: "javax.inject.Named",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDao.java",
                message:
                  "Replace the `javax.ejb` import statement with `jakarta.ejb` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Local;\n 22  \n 23  /**\n 24   * Basic operations for manipulation of tasks\n 25   *\n 26   * @author Lukas Fryc\n 27   *\n 28   */\n 29  @Local\n 30  public interface TaskDao {\n 31  \n 32      void createTask(User user, Task task);\n 33  \n 34      List\u003cTask\u003e getAll(User user);\n 35  \n 36      List\u003cTask\u003e getRange(User user, int offset, int count);\n 37  \n 38      List\u003cTask\u003e getForTitle(User user, String title);\n 39  \n 40      void deleteTask(Task task);\n 41  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDao.java",
                  kind: "Module",
                  name: "javax.ejb.Local",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "ejb",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                message:
                  "Replace the `javax.ejb` import statement with `jakarta.ejb` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  import javax.persistence.TypedQuery;\n 25  \n 26  /**\n 27   * Provides functionality for manipulation with tasks using the persistence context from {@link Resources}.\n 28   *\n 29   * @author Lukas Fryc\n 30   * @author Oliver Kiss\n 31   *\n 32   */\n 33  @Stateful\n 34  public class TaskDaoImpl implements TaskDao {\n 35  \n 36      @Inject\n 37      private EntityManager em;\n 38  \n 39      @Override\n 40      public void createTask(User user, Task task) {\n 41          if (!em.contains(user)) {\n 42              user = em.merge(user);\n 43          }\n 44          user.getTasks().add(task);\n 45          task.setOwner(user);\n 46          em.persist(task);\n 47      }\n 48  \n 49      @Override\n 50      public List\u003cTask\u003e getAll(User user) {\n 51          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 52          return query.getResultList();\n 53      }\n 54  \n 55      @Override\n 56      public List\u003cTask\u003e getRange(User user, int offset, int count) {\n 57          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 58          query.setMaxResults(count);\n 59          query.setFirstResult(offset);\n 60          return query.getResultList();\n 61      }\n 62  \n 63      @Override\n 64      public List\u003cTask\u003e getForTitle(User user, String title) {\n 65          String lowerCaseTitle = "%" + title.toLowerCase() + "%";\n 66          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1 AND LOWER(t.title) LIKE ?2", Task.class)\n 67              .setParameter(1, user).setParameter(2, lowerCaseTitle).getResultList();\n 68      }\n 69  \n 70      @Override\n 71      public void deleteTask(Task task) {\n 72          if (!em.contains(task)) {\n 73              task = em.merge(task);\n 74          }\n 75          em.remove(task);\n 76      }\n 77  \n 78      private TypedQuery\u003cTask\u003e querySelectAllTasksFromUser(User user) {\n 79          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1", Task.class).setParameter(1, user);\n 80      }\n 81  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                  kind: "Module",
                  name: "javax.ejb.Stateful",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "ejb",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  import javax.persistence.TypedQuery;\n 25  \n 26  /**\n 27   * Provides functionality for manipulation with tasks using the persistence context from {@link Resources}.\n 28   *\n 29   * @author Lukas Fryc\n 30   * @author Oliver Kiss\n 31   *\n 32   */\n 33  @Stateful\n 34  public class TaskDaoImpl implements TaskDao {\n 35  \n 36      @Inject\n 37      private EntityManager em;\n 38  \n 39      @Override\n 40      public void createTask(User user, Task task) {\n 41          if (!em.contains(user)) {\n 42              user = em.merge(user);\n 43          }\n 44          user.getTasks().add(task);\n 45          task.setOwner(user);\n 46          em.persist(task);\n 47      }\n 48  \n 49      @Override\n 50      public List\u003cTask\u003e getAll(User user) {\n 51          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 52          return query.getResultList();\n 53      }\n 54  \n 55      @Override\n 56      public List\u003cTask\u003e getRange(User user, int offset, int count) {\n 57          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 58          query.setMaxResults(count);\n 59          query.setFirstResult(offset);\n 60          return query.getResultList();\n 61      }\n 62  \n 63      @Override\n 64      public List\u003cTask\u003e getForTitle(User user, String title) {\n 65          String lowerCaseTitle = "%" + title.toLowerCase() + "%";\n 66          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1 AND LOWER(t.title) LIKE ?2", Task.class)\n 67              .setParameter(1, user).setParameter(2, lowerCaseTitle).getResultList();\n 68      }\n 69  \n 70      @Override\n 71      public void deleteTask(Task task) {\n 72          if (!em.contains(task)) {\n 73              task = em.merge(task);\n 74          }\n 75          em.remove(task);\n 76      }\n 77  \n 78      private TypedQuery\u003cTask\u003e querySelectAllTasksFromUser(User user) {\n 79          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1", Task.class).setParameter(1, user);\n 80      }\n 81  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  import javax.persistence.TypedQuery;\n 25  \n 26  /**\n 27   * Provides functionality for manipulation with tasks using the persistence context from {@link Resources}.\n 28   *\n 29   * @author Lukas Fryc\n 30   * @author Oliver Kiss\n 31   *\n 32   */\n 33  @Stateful\n 34  public class TaskDaoImpl implements TaskDao {\n 35  \n 36      @Inject\n 37      private EntityManager em;\n 38  \n 39      @Override\n 40      public void createTask(User user, Task task) {\n 41          if (!em.contains(user)) {\n 42              user = em.merge(user);\n 43          }\n 44          user.getTasks().add(task);\n 45          task.setOwner(user);\n 46          em.persist(task);\n 47      }\n 48  \n 49      @Override\n 50      public List\u003cTask\u003e getAll(User user) {\n 51          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 52          return query.getResultList();\n 53      }\n 54  \n 55      @Override\n 56      public List\u003cTask\u003e getRange(User user, int offset, int count) {\n 57          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 58          query.setMaxResults(count);\n 59          query.setFirstResult(offset);\n 60          return query.getResultList();\n 61      }\n 62  \n 63      @Override\n 64      public List\u003cTask\u003e getForTitle(User user, String title) {\n 65          String lowerCaseTitle = "%" + title.toLowerCase() + "%";\n 66          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1 AND LOWER(t.title) LIKE ?2", Task.class)\n 67              .setParameter(1, user).setParameter(2, lowerCaseTitle).getResultList();\n 68      }\n 69  \n 70      @Override\n 71      public void deleteTask(Task task) {\n 72          if (!em.contains(task)) {\n 73              task = em.merge(task);\n 74          }\n 75          em.remove(task);\n 76      }\n 77  \n 78      private TypedQuery\u003cTask\u003e querySelectAllTasksFromUser(User user) {\n 79          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1", Task.class).setParameter(1, user);\n 80      }\n 81  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  import javax.persistence.TypedQuery;\n 25  \n 26  /**\n 27   * Provides functionality for manipulation with tasks using the persistence context from {@link Resources}.\n 28   *\n 29   * @author Lukas Fryc\n 30   * @author Oliver Kiss\n 31   *\n 32   */\n 33  @Stateful\n 34  public class TaskDaoImpl implements TaskDao {\n 35  \n 36      @Inject\n 37      private EntityManager em;\n 38  \n 39      @Override\n 40      public void createTask(User user, Task task) {\n 41          if (!em.contains(user)) {\n 42              user = em.merge(user);\n 43          }\n 44          user.getTasks().add(task);\n 45          task.setOwner(user);\n 46          em.persist(task);\n 47      }\n 48  \n 49      @Override\n 50      public List\u003cTask\u003e getAll(User user) {\n 51          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 52          return query.getResultList();\n 53      }\n 54  \n 55      @Override\n 56      public List\u003cTask\u003e getRange(User user, int offset, int count) {\n 57          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 58          query.setMaxResults(count);\n 59          query.setFirstResult(offset);\n 60          return query.getResultList();\n 61      }\n 62  \n 63      @Override\n 64      public List\u003cTask\u003e getForTitle(User user, String title) {\n 65          String lowerCaseTitle = "%" + title.toLowerCase() + "%";\n 66          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1 AND LOWER(t.title) LIKE ?2", Task.class)\n 67              .setParameter(1, user).setParameter(2, lowerCaseTitle).getResultList();\n 68      }\n 69  \n 70      @Override\n 71      public void deleteTask(Task task) {\n 72          if (!em.contains(task)) {\n 73              task = em.merge(task);\n 74          }\n 75          em.remove(task);\n 76      }\n 77  \n 78      private TypedQuery\u003cTask\u003e querySelectAllTasksFromUser(User user) {\n 79          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1", Task.class).setParameter(1, user);\n 80      }\n 81  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                  kind: "Module",
                  name: "javax.persistence.TypedQuery",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskListBean.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.inject.Inject;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Operations with cached list of tasks for current user.\n 28   * \u003c/p\u003e\n 29   *\n 30   * \u003cp\u003e\n 31   * Delegates to {@link TaskDao} for persistence operations.\n 32   * \u003c/p\u003e\n 33   *\n 34   * \u003cp\u003e\n 35   * This bean ensures that task list will be obtained at most once per request or additionally after each invalidation (\n 36   * {@link #invalidate()}).\n 37   * \u003c/p\u003e\n 38   *\n 39   * \u003cp\u003e\n 40   * This behavior prevents unnecessary delegations to the persistence layer, since {{@link #getAll()} can be called several times\n 41   * per request when used in view layer.\n 42   * \u003c/p\u003e\n 43   *\n 44   * @author Lukas Fryc\n 45   */\n 46  @Named("taskList")\n 47  @RequestScoped\n 48  public class TaskListBean implements TaskList {\n 49  \n 50      private List\u003cTask\u003e tasks;\n 51  \n 52      @Inject\n 53      private TaskDao taskDao;\n 54  \n 55      @Inject\n 56      @CurrentUser\n 57      private User currentUser;\n 58  \n 59      @Override\n 60      public List\u003cTask\u003e getAll() {\n 61          if (tasks == null) {\n 62              tasks = taskDao.getAll(currentUser);\n 63          }\n 64          return tasks;\n 65      }\n 66  \n 67      @Override\n 68      public void invalidate() {\n 69          tasks = null;\n 70      }\n 71  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskListBean.java",
                  kind: "Module",
                  name: "javax.enterprise.context.RequestScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskListBean.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.inject.Inject;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Operations with cached list of tasks for current user.\n 28   * \u003c/p\u003e\n 29   *\n 30   * \u003cp\u003e\n 31   * Delegates to {@link TaskDao} for persistence operations.\n 32   * \u003c/p\u003e\n 33   *\n 34   * \u003cp\u003e\n 35   * This bean ensures that task list will be obtained at most once per request or additionally after each invalidation (\n 36   * {@link #invalidate()}).\n 37   * \u003c/p\u003e\n 38   *\n 39   * \u003cp\u003e\n 40   * This behavior prevents unnecessary delegations to the persistence layer, since {{@link #getAll()} can be called several times\n 41   * per request when used in view layer.\n 42   * \u003c/p\u003e\n 43   *\n 44   * @author Lukas Fryc\n 45   */\n 46  @Named("taskList")\n 47  @RequestScoped\n 48  public class TaskListBean implements TaskList {\n 49  \n 50      private List\u003cTask\u003e tasks;\n 51  \n 52      @Inject\n 53      private TaskDao taskDao;\n 54  \n 55      @Inject\n 56      @CurrentUser\n 57      private User currentUser;\n 58  \n 59      @Override\n 60      public List\u003cTask\u003e getAll() {\n 61          if (tasks == null) {\n 62              tasks = taskDao.getAll(currentUser);\n 63          }\n 64          return tasks;\n 65      }\n 66  \n 67      @Override\n 68      public void invalidate() {\n 69          tasks = null;\n 70      }\n 71  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskListBean.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskListBean.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.inject.Inject;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Operations with cached list of tasks for current user.\n 28   * \u003c/p\u003e\n 29   *\n 30   * \u003cp\u003e\n 31   * Delegates to {@link TaskDao} for persistence operations.\n 32   * \u003c/p\u003e\n 33   *\n 34   * \u003cp\u003e\n 35   * This bean ensures that task list will be obtained at most once per request or additionally after each invalidation (\n 36   * {@link #invalidate()}).\n 37   * \u003c/p\u003e\n 38   *\n 39   * \u003cp\u003e\n 40   * This behavior prevents unnecessary delegations to the persistence layer, since {{@link #getAll()} can be called several times\n 41   * per request when used in view layer.\n 42   * \u003c/p\u003e\n 43   *\n 44   * @author Lukas Fryc\n 45   */\n 46  @Named("taskList")\n 47  @RequestScoped\n 48  public class TaskListBean implements TaskList {\n 49  \n 50      private List\u003cTask\u003e tasks;\n 51  \n 52      @Inject\n 53      private TaskDao taskDao;\n 54  \n 55      @Inject\n 56      @CurrentUser\n 57      private User currentUser;\n 58  \n 59      @Override\n 60      public List\u003cTask\u003e getAll() {\n 61          if (tasks == null) {\n 62              tasks = taskDao.getAll(currentUser);\n 63          }\n 64          return tasks;\n 65      }\n 66  \n 67      @Override\n 68      public void invalidate() {\n 69          tasks = null;\n 70      }\n 71  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskListBean.java",
                  kind: "Module",
                  name: "javax.inject.Named",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 19,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.CascadeType.ALL",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 20,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.GenerationType.IDENTITY",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 26,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.Column",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 27,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.Entity",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 28,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.GeneratedValue",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 29,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.Id",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static javax.persistence.CascadeType.ALL;\n 20  import static javax.persistence.GenerationType.IDENTITY;\n 21  \n 22  import java.io.Serializable;\n 23  import java.util.ArrayList;\n 24  import java.util.List;\n 25  \n 26  import javax.persistence.Column;\n 27  import javax.persistence.Entity;\n 28  import javax.persistence.GeneratedValue;\n 29  import javax.persistence.Id;\n 30  import javax.persistence.OneToMany;\n 31  \n 32  /**\n 33   * User entity\n 34   *\n 35   * @author Oliver Kiss\n 36   */\n 37  @SuppressWarnings("serial")\n 38  @Entity\n 39  public class User implements Serializable {\n 40  \n 41      @Id\n 42      @GeneratedValue(strategy = IDENTITY)\n 43      private Long id;\n 44  \n 45      @Column(unique = true)\n 46      private String username;\n 47  \n 48      @OneToMany(cascade = ALL, mappedBy = "owner")\n 49      @Column(updatable = false)\n 50      private List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n 51  \n 52      public User() {\n 53      }\n 54  \n 55      public User(String username) {\n 56          this.username = username;\n 57      }\n 58  \n 59      public Long getId() {\n 60          return id;\n 61      }\n 62  \n 63      public void setId(Long id) {\n 64          this.id = id;\n 65      }\n 66  \n 67      public String getUsername() {\n 68          return username;\n 69      }\n 70  \n 71      public void setUsername(String username) {\n 72          this.username = username;\n 73      }\n 74  \n 75      public List\u003cTask\u003e getTasks() {\n 76          return tasks;\n 77      }\n 78  \n 79      public void setTasks(List\u003cTask\u003e tasks) {\n 80          this.tasks = tasks;\n 81      }\n 82  \n 83      @Override\n 84      public int hashCode() {\n 85          final int prime = 31;\n 86          int result = 1;\n 87          result = prime * result + ((username == null) ? 0 : username.hashCode());\n 88          return result;\n 89      }\n 90  \n 91      @Override\n 92      public boolean equals(Object obj) {\n 93          if (this == obj)\n 94              return true;\n 95          if (obj == null)\n 96              return false;\n 97          if (getClass() != obj.getClass())\n 98              return false;\n 99          User other = (User) obj;\n100          if (username == null) {\n101              if (other.username != null)\n102                  return false;\n103          } else if (!username.equals(other.username))\n104              return false;\n105          return true;\n106      }\n107  }\n',
                lineNumber: 30,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/User.java",
                  kind: "Module",
                  name: "javax.persistence.OneToMany",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDao.java",
                message:
                  "Replace the `javax.ejb` import statement with `jakarta.ejb` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.ejb.Local;\n 20  \n 21  /**\n 22   * Basic operations for manipulation with users\n 23   *\n 24   * @author Lukas Fryc\n 25   *\n 26   */\n 27  @Local\n 28  public interface UserDao {\n 29  \n 30      User getForUsername(String username);\n 31  \n 32      void createUser(User user);\n 33  }\n',
                lineNumber: 19,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDao.java",
                  kind: "Module",
                  name: "javax.ejb.Local",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "ejb",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                message:
                  "Replace the `javax.ejb` import statement with `jakarta.ejb` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  \n 25  /**\n 26   * Provides functionality for manipulation with users using persistence context from {@link Resources}.\n 27   *\n 28   * @author Lukas Fryc\n 29   * @author Oliver Kiss\n 30   *\n 31   */\n 32  @Stateful\n 33  public class UserDaoImpl implements UserDao {\n 34  \n 35      @Inject\n 36      private EntityManager em;\n 37  \n 38      public User getForUsername(String username) {\n 39          List\u003cUser\u003e result = em.createQuery("select u from User u where u.username = ?1", User.class).setParameter(1, username)\n 40              .getResultList();\n 41  \n 42          if (result.isEmpty()) {\n 43              return null;\n 44          }\n 45          return result.get(0);\n 46      }\n 47  \n 48      public void createUser(User user) {\n 49          em.persist(user);\n 50      }\n 51  }\n',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                  kind: "Module",
                  name: "javax.ejb.Stateful",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "ejb",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  \n 25  /**\n 26   * Provides functionality for manipulation with users using persistence context from {@link Resources}.\n 27   *\n 28   * @author Lukas Fryc\n 29   * @author Oliver Kiss\n 30   *\n 31   */\n 32  @Stateful\n 33  public class UserDaoImpl implements UserDao {\n 34  \n 35      @Inject\n 36      private EntityManager em;\n 37  \n 38      public User getForUsername(String username) {\n 39          List\u003cUser\u003e result = em.createQuery("select u from User u where u.username = ?1", User.class).setParameter(1, username)\n 40              .getResultList();\n 41  \n 42          if (result.isEmpty()) {\n 43              return null;\n 44          }\n 45          return result.get(0);\n 46      }\n 47  \n 48      public void createUser(User user) {\n 49          em.persist(user);\n 50      }\n 51  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  \n 25  /**\n 26   * Provides functionality for manipulation with users using persistence context from {@link Resources}.\n 27   *\n 28   * @author Lukas Fryc\n 29   * @author Oliver Kiss\n 30   *\n 31   */\n 32  @Stateful\n 33  public class UserDaoImpl implements UserDao {\n 34  \n 35      @Inject\n 36      private EntityManager em;\n 37  \n 38      public User getForUsername(String username) {\n 39          List\u003cUser\u003e result = em.createQuery("select u from User u where u.username = ?1", User.class).setParameter(1, username)\n 40              .getResultList();\n 41  \n 42          if (result.isEmpty()) {\n 43              return null;\n 44          }\n 45          return result.get(0);\n 46      }\n 47  \n 48      public void createUser(User user) {\n 49          em.persist(user);\n 50      }\n 51  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  ',
                lineNumber: 21,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.application.Application",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.application.FacesMessage",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  ',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.application.FacesMessage.Severity",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.component.UIViewRoot",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.context.ExternalContext",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  ',
                lineNumber: 26,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.context.FacesContext",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }',
                lineNumber: 27,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.context.ResponseStream",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  ',
                lineNumber: 28,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.context.ResponseWriter",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  \n129      @Override',
                lineNumber: 29,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Module",
                  name: "javax.faces.render.RenderKit",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/ResourcesIT.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertNotNull;\n 20  import static org.junit.Assert.assertNull;\n 21  import static org.junit.Assert.assertTrue;\n 22  \n 23  import java.io.FileNotFoundException;\n 24  import java.util.logging.Level;\n 25  import java.util.logging.Logger;\n 26  \n 27  import javax.enterprise.inject.Instance;\n 28  import javax.faces.context.FacesContext;\n 29  import javax.inject.Inject;\n 30  \n 31  import org.jboss.arquillian.container.test.api.Deployment;\n 32  import org.jboss.arquillian.junit.Arquillian;\n 33  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 34  import org.junit.Test;\n 35  import org.junit.runner.RunWith;\n 36  \n 37  /**\n 38   * @author Lukas Fryc\n 39   */\n 40  @RunWith(Arquillian.class)\n 41  public class ResourcesIT {\n 42  \n 43      public static final String WEBAPP_SRC = "src/main/webapp";\n 44  \n 45      @Deployment\n 46      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 47          return new DefaultDeployment().withPersistence().withFaces().getArchive()\n 48              .addClasses(Resources.class, FacesContextStub.class);\n 49      }\n 50  \n 51      @Inject\n 52      private Instance\u003cFacesContext\u003e facesContextInstance;\n 53  \n 54      @Inject\n 55      private Instance\u003cLogger\u003e loggerInstance;\n 56  \n 57      @Test\n 58      public void facesContext_should_be_provided_from_current_context() {\n 59          FacesContextStub.setCurrentInstance(new FacesContextStub("stub"));\n 60  \n 61          FacesContext facesContext = facesContextInstance.get();\n 62          assertNotNull(facesContext);\n 63          assertTrue(facesContext instanceof FacesContextStub);\n 64  \n 65          FacesContextStub.setCurrentInstance(null);\n 66  \n 67          facesContext = facesContextInstance.get();\n 68          assertNull(facesContext);\n 69      }\n 70  \n 71      @Test\n 72      public void logger_should_be_provided_and_be_able_to_log_information_message() {\n 73          Logger logger = loggerInstance.get();\n 74          assertNotNull(logger);\n 75          assertTrue(logger instanceof Logger);\n 76          logger.log(Level.INFO, "test message");\n 77      }\n 78  \n 79  }\n',
                lineNumber: 27,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/ResourcesIT.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Instance",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/ResourcesIT.java",
                message:
                  "Replace the `javax.faces` import statement with `jakarta.faces` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertNotNull;\n 20  import static org.junit.Assert.assertNull;\n 21  import static org.junit.Assert.assertTrue;\n 22  \n 23  import java.io.FileNotFoundException;\n 24  import java.util.logging.Level;\n 25  import java.util.logging.Logger;\n 26  \n 27  import javax.enterprise.inject.Instance;\n 28  import javax.faces.context.FacesContext;\n 29  import javax.inject.Inject;\n 30  \n 31  import org.jboss.arquillian.container.test.api.Deployment;\n 32  import org.jboss.arquillian.junit.Arquillian;\n 33  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 34  import org.junit.Test;\n 35  import org.junit.runner.RunWith;\n 36  \n 37  /**\n 38   * @author Lukas Fryc\n 39   */\n 40  @RunWith(Arquillian.class)\n 41  public class ResourcesIT {\n 42  \n 43      public static final String WEBAPP_SRC = "src/main/webapp";\n 44  \n 45      @Deployment\n 46      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 47          return new DefaultDeployment().withPersistence().withFaces().getArchive()\n 48              .addClasses(Resources.class, FacesContextStub.class);\n 49      }\n 50  \n 51      @Inject\n 52      private Instance\u003cFacesContext\u003e facesContextInstance;\n 53  \n 54      @Inject\n 55      private Instance\u003cLogger\u003e loggerInstance;\n 56  \n 57      @Test\n 58      public void facesContext_should_be_provided_from_current_context() {\n 59          FacesContextStub.setCurrentInstance(new FacesContextStub("stub"));\n 60  \n 61          FacesContext facesContext = facesContextInstance.get();\n 62          assertNotNull(facesContext);\n 63          assertTrue(facesContext instanceof FacesContextStub);\n 64  \n 65          FacesContextStub.setCurrentInstance(null);\n 66  \n 67          facesContext = facesContextInstance.get();\n 68          assertNull(facesContext);\n 69      }\n 70  \n 71      @Test\n 72      public void logger_should_be_provided_and_be_able_to_log_information_message() {\n 73          Logger logger = loggerInstance.get();\n 74          assertNotNull(logger);\n 75          assertTrue(logger instanceof Logger);\n 76          logger.log(Level.INFO, "test message");\n 77      }\n 78  \n 79  }\n',
                lineNumber: 28,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/ResourcesIT.java",
                  kind: "Module",
                  name: "javax.faces.context.FacesContext",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "faces",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/ResourcesIT.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertNotNull;\n 20  import static org.junit.Assert.assertNull;\n 21  import static org.junit.Assert.assertTrue;\n 22  \n 23  import java.io.FileNotFoundException;\n 24  import java.util.logging.Level;\n 25  import java.util.logging.Logger;\n 26  \n 27  import javax.enterprise.inject.Instance;\n 28  import javax.faces.context.FacesContext;\n 29  import javax.inject.Inject;\n 30  \n 31  import org.jboss.arquillian.container.test.api.Deployment;\n 32  import org.jboss.arquillian.junit.Arquillian;\n 33  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 34  import org.junit.Test;\n 35  import org.junit.runner.RunWith;\n 36  \n 37  /**\n 38   * @author Lukas Fryc\n 39   */\n 40  @RunWith(Arquillian.class)\n 41  public class ResourcesIT {\n 42  \n 43      public static final String WEBAPP_SRC = "src/main/webapp";\n 44  \n 45      @Deployment\n 46      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 47          return new DefaultDeployment().withPersistence().withFaces().getArchive()\n 48              .addClasses(Resources.class, FacesContextStub.class);\n 49      }\n 50  \n 51      @Inject\n 52      private Instance\u003cFacesContext\u003e facesContextInstance;\n 53  \n 54      @Inject\n 55      private Instance\u003cLogger\u003e loggerInstance;\n 56  \n 57      @Test\n 58      public void facesContext_should_be_provided_from_current_context() {\n 59          FacesContextStub.setCurrentInstance(new FacesContextStub("stub"));\n 60  \n 61          FacesContext facesContext = facesContextInstance.get();\n 62          assertNotNull(facesContext);\n 63          assertTrue(facesContext instanceof FacesContextStub);\n 64  \n 65          FacesContextStub.setCurrentInstance(null);\n 66  \n 67          facesContext = facesContextInstance.get();\n 68          assertNull(facesContext);\n 69      }\n 70  \n 71      @Test\n 72      public void logger_should_be_provided_and_be_able_to_log_information_message() {\n 73          Logger logger = loggerInstance.get();\n 74          assertNotNull(logger);\n 75          assertTrue(logger instanceof Logger);\n 76          logger.log(Level.INFO, "test message");\n 77      }\n 78  \n 79  }\n',
                lineNumber: 29,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/ResourcesIT.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoIT.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertEquals;\n 20  import static org.junit.Assert.assertTrue;\n 21  \n 22  import java.io.FileNotFoundException;\n 23  import java.util.List;\n 24  import javax.inject.Inject;\n 25  import javax.persistence.EntityManager;\n 26  \n 27  import org.jboss.arquillian.container.test.api.Deployment;\n 28  import org.jboss.arquillian.junit.Arquillian;\n 29  import org.jboss.arquillian.junit.InSequence;\n 30  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 31  import org.junit.Before;\n 32  import org.junit.Test;\n 33  import org.junit.runner.RunWith;\n 34  \n 35  /**\n 36   * @author Lukas Fryc\n 37   * @author Oliver Kiss\n 38   */\n 39  @RunWith(Arquillian.class)\n 40  public class TaskDaoIT {\n 41  \n 42      @Deployment\n 43      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 44          return new DefaultDeployment().withPersistence().withImportedData().getArchive()\n 45                  .addClasses(Resources.class, User.class, UserDao.class, Task.class, TaskDao.class, TaskDaoImpl.class);\n 46      }\n 47  \n 48      @Inject\n 49      private EntityManager em;\n 50  \n 51      @Inject\n 52      private TaskDao taskDao;\n 53  \n 54      private User detachedUser;\n 55  \n 56      @Before\n 57      public void setUp() throws Exception {\n 58          detachedUser = new User("jdoe");\n 59          detachedUser.setId(1L);\n 60      }\n 61  \n 62      @Test\n 63      @InSequence(1)\n 64      public void user_should_be_created_with_one_task_attached() throws Exception {\n 65          // given\n 66          User user = new User("New user");\n 67          Task task = new Task("New task");\n 68  \n 69          // when\n 70          em.persist(user);\n 71          taskDao.createTask(user, task);\n 72          List\u003cTask\u003e userTasks = em.createQuery("SELECT t FROM Task t WHERE t.owner = :owner", Task.class)\n 73                  .setParameter("owner", user).getResultList();\n 74  \n 75          // then\n 76          assertEquals(1, userTasks.size());\n 77          assertEquals(task, userTasks.get(0));\n 78      }\n 79  \n 80      @Test\n 81      @InSequence(2)\n 82      public void all_tasks_should_be_obtained_from_detachedUser() {\n 83          // when\n 84          List\u003cTask\u003e userTasks = taskDao.getAll(detachedUser);\n 85  \n 86          // then\n 87          assertEquals(2, userTasks.size());\n 88      }\n 89  \n 90      @Test\n 91      @InSequence(3)\n 92      public void range_of_tasks_should_be_provided_by_taskDao() {\n 93          // when\n 94          List\u003cTask\u003e headOfTasks = taskDao.getRange(detachedUser, 0, 1);\n 95          List\u003cTask\u003e tailOfTasks = taskDao.getRange(detachedUser, 1, 1);\n 96  \n 97          // then\n 98          assertEquals(1, headOfTasks.size());\n 99          assertEquals(1, tailOfTasks.size());\n100          assertTrue(headOfTasks.get(0).getTitle().contains("first"));\n101          assertTrue(tailOfTasks.get(0).getTitle().contains("second"));\n102      }\n103  \n104      @Test\n105      @InSequence(4)\n106      public void taskDao_should_provide_basic_case_insensitive_full_text_search() {\n107          // given\n108          String taskTitlePart = "FIRST";\n109  \n110          // when\n111          List\u003cTask\u003e titledTasks = taskDao.getForTitle(detachedUser, taskTitlePart);\n112  \n113          // then\n114          assertEquals(1, titledTasks.size());\n115          assertTrue(titledTasks.get(0).getTitle().contains("first"));\n116      }\n117  \n118      @Test\n119      @InSequence(5)\n120      public void taskDao_should_remove_task_from_detachedUser() {\n121          // given\n122          Task task = new Task();\n123          task.setId(1L);\n124          task.setOwner(detachedUser);',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoIT.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoIT.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertEquals;\n 20  import static org.junit.Assert.assertTrue;\n 21  \n 22  import java.io.FileNotFoundException;\n 23  import java.util.List;\n 24  import javax.inject.Inject;\n 25  import javax.persistence.EntityManager;\n 26  \n 27  import org.jboss.arquillian.container.test.api.Deployment;\n 28  import org.jboss.arquillian.junit.Arquillian;\n 29  import org.jboss.arquillian.junit.InSequence;\n 30  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 31  import org.junit.Before;\n 32  import org.junit.Test;\n 33  import org.junit.runner.RunWith;\n 34  \n 35  /**\n 36   * @author Lukas Fryc\n 37   * @author Oliver Kiss\n 38   */\n 39  @RunWith(Arquillian.class)\n 40  public class TaskDaoIT {\n 41  \n 42      @Deployment\n 43      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 44          return new DefaultDeployment().withPersistence().withImportedData().getArchive()\n 45                  .addClasses(Resources.class, User.class, UserDao.class, Task.class, TaskDao.class, TaskDaoImpl.class);\n 46      }\n 47  \n 48      @Inject\n 49      private EntityManager em;\n 50  \n 51      @Inject\n 52      private TaskDao taskDao;\n 53  \n 54      private User detachedUser;\n 55  \n 56      @Before\n 57      public void setUp() throws Exception {\n 58          detachedUser = new User("jdoe");\n 59          detachedUser.setId(1L);\n 60      }\n 61  \n 62      @Test\n 63      @InSequence(1)\n 64      public void user_should_be_created_with_one_task_attached() throws Exception {\n 65          // given\n 66          User user = new User("New user");\n 67          Task task = new Task("New task");\n 68  \n 69          // when\n 70          em.persist(user);\n 71          taskDao.createTask(user, task);\n 72          List\u003cTask\u003e userTasks = em.createQuery("SELECT t FROM Task t WHERE t.owner = :owner", Task.class)\n 73                  .setParameter("owner", user).getResultList();\n 74  \n 75          // then\n 76          assertEquals(1, userTasks.size());\n 77          assertEquals(task, userTasks.get(0));\n 78      }\n 79  \n 80      @Test\n 81      @InSequence(2)\n 82      public void all_tasks_should_be_obtained_from_detachedUser() {\n 83          // when\n 84          List\u003cTask\u003e userTasks = taskDao.getAll(detachedUser);\n 85  \n 86          // then\n 87          assertEquals(2, userTasks.size());\n 88      }\n 89  \n 90      @Test\n 91      @InSequence(3)\n 92      public void range_of_tasks_should_be_provided_by_taskDao() {\n 93          // when\n 94          List\u003cTask\u003e headOfTasks = taskDao.getRange(detachedUser, 0, 1);\n 95          List\u003cTask\u003e tailOfTasks = taskDao.getRange(detachedUser, 1, 1);\n 96  \n 97          // then\n 98          assertEquals(1, headOfTasks.size());\n 99          assertEquals(1, tailOfTasks.size());\n100          assertTrue(headOfTasks.get(0).getTitle().contains("first"));\n101          assertTrue(tailOfTasks.get(0).getTitle().contains("second"));\n102      }\n103  \n104      @Test\n105      @InSequence(4)\n106      public void taskDao_should_provide_basic_case_insensitive_full_text_search() {\n107          // given\n108          String taskTitlePart = "FIRST";\n109  \n110          // when\n111          List\u003cTask\u003e titledTasks = taskDao.getForTitle(detachedUser, taskTitlePart);\n112  \n113          // then\n114          assertEquals(1, titledTasks.size());\n115          assertTrue(titledTasks.get(0).getTitle().contains("first"));\n116      }\n117  \n118      @Test\n119      @InSequence(5)\n120      public void taskDao_should_remove_task_from_detachedUser() {\n121          // given\n122          Task task = new Task();\n123          task.setId(1L);\n124          task.setOwner(detachedUser);\n125          assertEquals(2, taskDao.getAll(detachedUser).size());',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoIT.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskListBeanIT.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertEquals;\n 20  \n 21  import java.io.FileNotFoundException;\n 22  import javax.inject.Inject;\n 23  \n 24  import org.jboss.arquillian.container.test.api.Deployment;\n 25  import org.jboss.arquillian.junit.Arquillian;\n 26  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 27  import org.junit.Test;\n 28  import org.junit.runner.RunWith;\n 29  \n 30  /**\n 31   * @author Lukas Fryc\n 32   */\n 33  @RunWith(Arquillian.class)\n 34  public class TaskListBeanIT {\n 35  \n 36      public static final String WEBAPP_SRC = "src/main/webapp";\n 37  \n 38      @Deployment\n 39      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 40          return new DefaultDeployment(true).withPersistence().withImportedData().getArchive()\n 41                  .addClasses(User.class, Task.class, TaskList.class, TaskListBean.class, TaskDao.class, TaskDaoStub.class, Testing.class);\n 42      }\n 43  \n 44      @Inject\n 45      private TaskDao taskDaoStub;\n 46  \n 47      @Inject\n 48      private TaskList taskList;\n 49  \n 50      @Test\n 51      public void dao_method_getAll_should_be_called_only_once_on() {\n 52          taskList.getAll();\n 53          taskList.getAll();\n 54          taskList.getAll();\n 55          assertEquals(1, ((TaskDaoStub) taskDaoStub).getGetAllCallsCount());\n 56      }\n 57  \n 58      @Test\n 59      public void dao_method_getAll_should_be_called_after_invalidation() {\n 60          taskList.getAll();\n 61          taskList.getAll();\n 62          assertEquals(1, ((TaskDaoStub) taskDaoStub).getGetAllCallsCount());\n 63          taskList.invalidate();\n 64          assertEquals(1, ((TaskDaoStub) taskDaoStub).getGetAllCallsCount());\n 65          taskList.getAll();\n 66          taskList.getAll();\n 67          assertEquals(2, ((TaskDaoStub) taskDaoStub).getGetAllCallsCount());\n 68      }\n 69  }\n',
                lineNumber: 22,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskListBeanIT.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/Testing.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.lang.annotation.Documented;\n 20  import java.lang.annotation.Inherited;\n 21  import java.lang.annotation.Retention;\n 22  import java.lang.annotation.Target;\n 23  \n 24  import javax.enterprise.context.RequestScoped;\n 25  import javax.enterprise.inject.Alternative;\n 26  import javax.enterprise.inject.Stereotype;\n 27  \n 28  import static java.lang.annotation.ElementType.FIELD;\n 29  import static java.lang.annotation.ElementType.METHOD;\n 30  import static java.lang.annotation.ElementType.TYPE;\n 31  import static java.lang.annotation.RetentionPolicy.RUNTIME;\n 32  \n 33  /**\n 34   * Alternative testing annotation, used to enable all testing alternatives.\n 35   * @author jporter\n 36   */\n 37  @Stereotype\n 38  @Inherited\n 39  @Alternative\n 40  @RequestScoped\n 41  @Target({ TYPE, METHOD, FIELD })\n 42  @Retention(RUNTIME)\n 43  @Documented\n 44  public @interface Testing {\n 45  \n 46  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/Testing.java",
                  kind: "Module",
                  name: "javax.enterprise.context.RequestScoped",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/Testing.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.lang.annotation.Documented;\n 20  import java.lang.annotation.Inherited;\n 21  import java.lang.annotation.Retention;\n 22  import java.lang.annotation.Target;\n 23  \n 24  import javax.enterprise.context.RequestScoped;\n 25  import javax.enterprise.inject.Alternative;\n 26  import javax.enterprise.inject.Stereotype;\n 27  \n 28  import static java.lang.annotation.ElementType.FIELD;\n 29  import static java.lang.annotation.ElementType.METHOD;\n 30  import static java.lang.annotation.ElementType.TYPE;\n 31  import static java.lang.annotation.RetentionPolicy.RUNTIME;\n 32  \n 33  /**\n 34   * Alternative testing annotation, used to enable all testing alternatives.\n 35   * @author jporter\n 36   */\n 37  @Stereotype\n 38  @Inherited\n 39  @Alternative\n 40  @RequestScoped\n 41  @Target({ TYPE, METHOD, FIELD })\n 42  @Retention(RUNTIME)\n 43  @Documented\n 44  public @interface Testing {\n 45  \n 46  }\n',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/Testing.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Alternative",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/Testing.java",
                message:
                  "Replace the `javax.enterprise` import statement with `jakarta.enterprise` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.lang.annotation.Documented;\n 20  import java.lang.annotation.Inherited;\n 21  import java.lang.annotation.Retention;\n 22  import java.lang.annotation.Target;\n 23  \n 24  import javax.enterprise.context.RequestScoped;\n 25  import javax.enterprise.inject.Alternative;\n 26  import javax.enterprise.inject.Stereotype;\n 27  \n 28  import static java.lang.annotation.ElementType.FIELD;\n 29  import static java.lang.annotation.ElementType.METHOD;\n 30  import static java.lang.annotation.ElementType.TYPE;\n 31  import static java.lang.annotation.RetentionPolicy.RUNTIME;\n 32  \n 33  /**\n 34   * Alternative testing annotation, used to enable all testing alternatives.\n 35   * @author jporter\n 36   */\n 37  @Stereotype\n 38  @Inherited\n 39  @Alternative\n 40  @RequestScoped\n 41  @Target({ TYPE, METHOD, FIELD })\n 42  @Retention(RUNTIME)\n 43  @Documented\n 44  public @interface Testing {\n 45  \n 46  }\n',
                lineNumber: 26,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/Testing.java",
                  kind: "Module",
                  name: "javax.enterprise.inject.Stereotype",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "enterprise",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/UserDaoIT.java",
                message:
                  "Replace the `javax.inject` import statement with `jakarta.inject` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertNull;\n 20  import static org.junit.Assert.assertTrue;\n 21  \n 22  import java.io.FileNotFoundException;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  \n 26  import org.jboss.arquillian.container.test.api.Deployment;\n 27  import org.jboss.arquillian.junit.Arquillian;\n 28  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 29  import org.junit.Assert;\n 30  import org.junit.Test;\n 31  import org.junit.runner.RunWith;\n 32  \n 33  /**\n 34   * @author Lukas Fryc\n 35   * @author Oliver Kiss\n 36   */\n 37  @RunWith(Arquillian.class)\n 38  public class UserDaoIT {\n 39  \n 40      @Deployment\n 41      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 42          return new DefaultDeployment().withPersistence().withImportedData().getArchive()\n 43                  .addClasses(Resources.class, User.class, UserDao.class, Task.class, TaskDao.class, UserDaoImpl.class);\n 44      }\n 45  \n 46      @Inject\n 47      private UserDao userDao;\n 48  \n 49      @Inject\n 50      private EntityManager em;\n 51  \n 52      @Test\n 53      public void userDao_should_create_user_so_it_could_be_retrieved_from_userDao_by_username() {\n 54          // given\n 55          User created = new User("username1");\n 56  \n 57          // when\n 58          userDao.createUser(created);\n 59          User retrieved = userDao.getForUsername("username1");\n 60  \n 61          // then\n 62          assertTrue(em.contains(created));\n 63          assertTrue(em.contains(retrieved));\n 64          Assert.assertEquals(created, retrieved);\n 65      }\n 66  \n 67      @Test\n 68      public void user_should_be_retrievable_from_userDao_by_username() {\n 69          // given\n 70          String username = "jdoe";\n 71  \n 72          // when\n 73          User retrieved = userDao.getForUsername(username);\n 74  \n 75          // then\n 76          Assert.assertEquals(username, retrieved.getUsername());\n 77      }\n 78  \n 79      @Test\n 80      public void userDao_should_return_null_when_searching_for_non_existent_user() {\n 81          // given\n 82          String nonExistent = "nonExistent";\n 83  \n 84          // when\n 85          User retrieved = userDao.getForUsername(nonExistent);\n 86  \n 87          // then\n 88          assertNull(retrieved);\n 89      }\n 90  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/UserDaoIT.java",
                  kind: "Module",
                  name: "javax.inject.Inject",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "inject",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/UserDaoIT.java",
                message:
                  "Replace the `javax.persistence` import statement with `jakarta.persistence` ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertNull;\n 20  import static org.junit.Assert.assertTrue;\n 21  \n 22  import java.io.FileNotFoundException;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  \n 26  import org.jboss.arquillian.container.test.api.Deployment;\n 27  import org.jboss.arquillian.junit.Arquillian;\n 28  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 29  import org.junit.Assert;\n 30  import org.junit.Test;\n 31  import org.junit.runner.RunWith;\n 32  \n 33  /**\n 34   * @author Lukas Fryc\n 35   * @author Oliver Kiss\n 36   */\n 37  @RunWith(Arquillian.class)\n 38  public class UserDaoIT {\n 39  \n 40      @Deployment\n 41      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 42          return new DefaultDeployment().withPersistence().withImportedData().getArchive()\n 43                  .addClasses(Resources.class, User.class, UserDao.class, Task.class, TaskDao.class, UserDaoImpl.class);\n 44      }\n 45  \n 46      @Inject\n 47      private UserDao userDao;\n 48  \n 49      @Inject\n 50      private EntityManager em;\n 51  \n 52      @Test\n 53      public void userDao_should_create_user_so_it_could_be_retrieved_from_userDao_by_username() {\n 54          // given\n 55          User created = new User("username1");\n 56  \n 57          // when\n 58          userDao.createUser(created);\n 59          User retrieved = userDao.getForUsername("username1");\n 60  \n 61          // then\n 62          assertTrue(em.contains(created));\n 63          assertTrue(em.contains(retrieved));\n 64          Assert.assertEquals(created, retrieved);\n 65      }\n 66  \n 67      @Test\n 68      public void user_should_be_retrievable_from_userDao_by_username() {\n 69          // given\n 70          String username = "jdoe";\n 71  \n 72          // when\n 73          User retrieved = userDao.getForUsername(username);\n 74  \n 75          // then\n 76          Assert.assertEquals(username, retrieved.getUsername());\n 77      }\n 78  \n 79      @Test\n 80      public void userDao_should_return_null_when_searching_for_non_existent_user() {\n 81          // given\n 82          String nonExistent = "nonExistent";\n 83  \n 84          // when\n 85          User retrieved = userDao.getForUsername(nonExistent);\n 86  \n 87          // then\n 88          assertNull(retrieved);\n 89      }\n 90  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/UserDaoIT.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                  renamed: "persistence",
                },
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javax-to-jakarta-servlet-00060": {
            description:
              "Method in javax.servlet.ServletRequestWrapper has been removed",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "\n Method `getRealPath` in javax.servlet.ServletRequestWrapper has been removed. It can be replaced with `ServletContext.getRealPath(String path)`.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  \n129      @Override\n130      public void release() {\n131  \n132      }\n133  \n134      @Override\n135      public void renderResponse() {\n136  \n137      }\n138  \n139      @Override',
                lineNumber: 39,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Constructor",
                  name: "FacesContextStub",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://access.redhat.com/articles/6980265#servlet",
                title:
                  "Red Hat JBoss EAP Application Migration from Jakarta EE 8 to EE 10 - Jakarta Servlet",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javax-to-jakarta-servlet-00100": {
            description:
              "Method encodeUrl in javax.servlet.http.HttpServletResponse has been removed",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "\n Method encodeURL in javax.servlet.http.HttpServletResponse has been removed. Use encodeURL(String) instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  \n129      @Override\n130      public void release() {\n131  \n132      }\n133  \n134      @Override\n135      public void renderResponse() {\n136  \n137      }\n138  \n139      @Override',
                lineNumber: 39,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Constructor",
                  name: "FacesContextStub",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://access.redhat.com/articles/6980265#servlet",
                title:
                  "Red Hat JBoss EAP Application Migration from Jakarta EE 8 to EE 10 - Jakarta Servlet",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javax-to-jakarta-servlet-00101": {
            description:
              "Method encodeRedirectUrl in javax.servlet.http.HttpServletResponse has been removed",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "\n Method encodeRedirectUrl(String) in javax.servlet.http.HttpServletResponse has been removed. Use encodeRedirectURL(String) instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  \n129      @Override\n130      public void release() {\n131  \n132      }\n133  \n134      @Override\n135      public void renderResponse() {\n136  \n137      }\n138  \n139      @Override',
                lineNumber: 39,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Constructor",
                  name: "FacesContextStub",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://access.redhat.com/articles/6980265#servlet",
                title:
                  "Red Hat JBoss EAP Application Migration from Jakarta EE 8 to EE 10 - Jakarta Servlet",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javax-to-jakarta-servlet-00110": {
            description:
              "Method encodeUrl in javax.servlet.http.HttpServletResponseWrapper has been removed",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "\n Method encodeUrl in javax.servlet.http.HttpServletResponseWrapper has been removed. Use encodeURL instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  \n129      @Override\n130      public void release() {\n131  \n132      }\n133  \n134      @Override\n135      public void renderResponse() {\n136  \n137      }\n138  \n139      @Override',
                lineNumber: 39,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Constructor",
                  name: "FacesContextStub",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://access.redhat.com/articles/6980265#servlet",
                title:
                  "Red Hat JBoss EAP Application Migration from Jakarta EE 8 to EE 10 - Jakarta Servlet",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javax-to-jakarta-servlet-00111": {
            description:
              "Method encodeRedirectUrl in javax.servlet.http.HttpServletResponseWrapper has been removed",
            category: "mandatory",
            labels: [
              "konveyor.io/source",
              "konveyor.io/target=eap",
              "konveyor.io/target=eap8",
              "konveyor.io/target=jakarta-ee",
              "konveyor.io/target=jakarta-ee9+",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                message:
                  "\n Method encodeRedirectUrl in javax.servlet.http.HttpServletResponseWrapper has been removed. Use encodeRedirectURL instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.Iterator;\n 20  \n 21  import javax.faces.application.Application;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.application.FacesMessage.Severity;\n 24  import javax.faces.component.UIViewRoot;\n 25  import javax.faces.context.ExternalContext;\n 26  import javax.faces.context.FacesContext;\n 27  import javax.faces.context.ResponseStream;\n 28  import javax.faces.context.ResponseWriter;\n 29  import javax.faces.render.RenderKit;\n 30  \n 31  /**\n 32   * Stub of {@link FacesContext} to allow testing without real JSF session.\n 33   *\n 34   * @author Lukas Fryc\n 35   *\n 36   */\n 37  public class FacesContextStub extends FacesContext {\n 38  \n 39      FacesContextStub(String test) {\n 40      }\n 41  \n 42      public static void setCurrentInstance(FacesContext facesContext) {\n 43          FacesContext.setCurrentInstance(facesContext);\n 44      }\n 45  \n 46      @Override\n 47      public Application getApplication() {\n 48          return null;\n 49      }\n 50  \n 51      @Override\n 52      public Iterator\u003cString\u003e getClientIdsWithMessages() {\n 53          return null;\n 54      }\n 55  \n 56      @Override\n 57      public ExternalContext getExternalContext() {\n 58          return null;\n 59      }\n 60  \n 61      @Override\n 62      public Severity getMaximumSeverity() {\n 63          return null;\n 64      }\n 65  \n 66      @Override\n 67      public Iterator\u003cFacesMessage\u003e getMessages() {\n 68          return null;\n 69      }\n 70  \n 71      @Override\n 72      public Iterator\u003cFacesMessage\u003e getMessages(String clientId) {\n 73          return null;\n 74      }\n 75  \n 76      @Override\n 77      public RenderKit getRenderKit() {\n 78          return null;\n 79      }\n 80  \n 81      @Override\n 82      public boolean getRenderResponse() {\n 83          return false;\n 84      }\n 85  \n 86      @Override\n 87      public boolean getResponseComplete() {\n 88          return false;\n 89      }\n 90  \n 91      @Override\n 92      public ResponseStream getResponseStream() {\n 93  \n 94          return null;\n 95      }\n 96  \n 97      @Override\n 98      public void setResponseStream(ResponseStream responseStream) {\n 99  \n100      }\n101  \n102      @Override\n103      public ResponseWriter getResponseWriter() {\n104  \n105          return null;\n106      }\n107  \n108      @Override\n109      public void setResponseWriter(ResponseWriter responseWriter) {\n110  \n111      }\n112  \n113      @Override\n114      public UIViewRoot getViewRoot() {\n115  \n116          return null;\n117      }\n118  \n119      @Override\n120      public void setViewRoot(UIViewRoot root) {\n121  \n122      }\n123  \n124      @Override\n125      public void addMessage(String clientId, FacesMessage message) {\n126  \n127      }\n128  \n129      @Override\n130      public void release() {\n131  \n132      }\n133  \n134      @Override\n135      public void renderResponse() {\n136  \n137      }\n138  \n139      @Override',
                lineNumber: 39,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/FacesContextStub.java",
                  kind: "Constructor",
                  name: "FacesContextStub",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://access.redhat.com/articles/6980265#servlet",
                title:
                  "Red Hat JBoss EAP Application Migration from Jakarta EE 8 to EE 10 - Jakarta Servlet",
              },
            ],
            Extras: null,
            effort: 1,
          },
        },
        unmatched: [
          "javaee-to-jakarta-namespaces-00003",
          "javaee-to-jakarta-namespaces-00004",
          "javaee-to-jakarta-namespaces-00005",
          "javaee-to-jakarta-namespaces-00007",
          "javaee-to-jakarta-namespaces-00008",
          "javaee-to-jakarta-namespaces-00009",
          "javaee-to-jakarta-namespaces-00010",
          "javaee-to-jakarta-namespaces-00011",
          "javaee-to-jakarta-namespaces-00012",
          "javaee-to-jakarta-namespaces-00013",
          "javaee-to-jakarta-namespaces-00014",
          "javaee-to-jakarta-namespaces-00015",
          "javaee-to-jakarta-namespaces-00016",
          "javaee-to-jakarta-namespaces-00017",
          "javaee-to-jakarta-namespaces-00018",
          "javaee-to-jakarta-namespaces-00019",
          "javaee-to-jakarta-namespaces-00020",
          "javaee-to-jakarta-namespaces-00022",
          "javaee-to-jakarta-namespaces-00023",
          "javaee-to-jakarta-namespaces-00024",
          "javaee-to-jakarta-namespaces-00025",
          "javaee-to-jakarta-namespaces-00026",
          "javaee-to-jakarta-namespaces-00027",
          "javaee-to-jakarta-namespaces-00028",
          "javaee-to-jakarta-namespaces-00029",
          "javaee-to-jakarta-namespaces-00031",
          "javaee-to-jakarta-namespaces-00032",
          "javaee-to-jakarta-namespaces-00034",
          "javaee-to-jakarta-namespaces-00035",
          "javaee-to-jakarta-namespaces-00036",
          "javaee-to-jakarta-namespaces-00037",
          "javaee-to-jakarta-namespaces-00038",
          "javaee-to-jakarta-namespaces-00039",
          "javaee-to-jakarta-namespaces-00040",
          "javaee-to-jakarta-namespaces-00041",
          "javaee-to-jakarta-namespaces-00042",
          "javaee-to-jakarta-namespaces-00043",
          "javaee-to-jakarta-namespaces-00044",
          "javaee-to-jakarta-namespaces-00045",
          "javaee-to-jakarta-namespaces-00046",
          "javaee-to-jakarta-namespaces-00047",
          "javaee-to-jakarta-namespaces-00049",
          "javaee-to-jakarta-namespaces-00050",
          "javaee-to-jakarta-namespaces-00051",
          "javaee-to-jakarta-namespaces-00052",
          "javaee-to-jakarta-namespaces-00053",
          "javaee-to-jakarta-namespaces-00054",
          "javaee-to-jakarta-namespaces-00055",
          "javaee-to-jakarta-namespaces-00056",
          "javax-to-jakarta-bootstrapping-files-00001",
          "javax-to-jakarta-dependencies-00001",
          "javax-to-jakarta-dependencies-00002",
          "javax-to-jakarta-dependencies-00003",
          "javax-to-jakarta-dependencies-00004",
          "javax-to-jakarta-dependencies-00005",
          "javax-to-jakarta-dependencies-00006",
          "javax-to-jakarta-dependencies-00007",
          "javax-to-jakarta-dependencies-00008",
          "javax-to-jakarta-properties-00001",
          "javax-to-jakarta-servlet-00010",
          "javax-to-jakarta-servlet-00020",
          "javax-to-jakarta-servlet-00030",
          "javax-to-jakarta-servlet-00040",
          "javax-to-jakarta-servlet-00041",
          "javax-to-jakarta-servlet-00042",
          "javax-to-jakarta-servlet-00043",
          "javax-to-jakarta-servlet-00050",
          "javax-to-jakarta-servlet-00070",
          "javax-to-jakarta-servlet-00071",
          "javax-to-jakarta-servlet-00072",
          "javax-to-jakarta-servlet-00080",
          "javax-to-jakarta-servlet-00090",
          "javax-to-jakarta-servlet-00102",
          "javax-to-jakarta-servlet-00112",
          "javax-to-jakarta-servlet-00120",
          "javax-to-jakarta-servlet-00121",
          "javax-to-jakarta-servlet-00122",
          "javax-to-jakarta-servlet-00123",
        ],
        skipped: [
          "eap8-ejb-00001",
          "eap8-ejb-00002",
          "eap8-ejb-00003",
          "eap8-faces-00001",
          "eap8-faces-00002",
          "eap8-faces-00003",
          "eap8-faces-00004",
          "eap8-faces-00005",
          "eap8-faces-00006",
          "eap8-faces-00007",
          "eap8-faces-00008",
          "eap8-faces-00009",
          "eap8-resteasy-00001",
          "eap8-resteasy-00002",
          "eap8-resteasy-00003",
          "eap8-resteasy-00004",
          "eap8-resteasy-00005",
          "eap8-resteasy-00006",
          "eap8-resteasy-00007",
          "eap8-resteasy-00008",
          "eap8-resteasy-00009",
          "eap8-resteasy-00010",
          "eap8-resteasy-00011",
          "eap8-xml-binding-00001",
          "eap8-xml-binding-00002",
          "eap8-xml-binding-00003",
          "eap8-xml-binding-00004",
          "eap8-xml-binding-00005",
          "eap8-xml-binding-00006",
          "eap8-xml-binding-00007",
          "eap8-xml-binding-00008",
          "eap8-xml-binding-00009",
          "empty-beans-xml-00001",
          "hibernate-00005",
          "hibernate-00010",
          "hibernate-6.2-00010",
          "hibernate-6.2-00020",
          "hibernate-6.2-00030",
          "hibernate-6.2-00040",
          "hibernate-6.2-00050",
          "hibernate-search-00010",
          "hibernate-search-00020",
          "hibernate-search-00030",
          "hibernate-search-00040",
          "hibernate-search-00050",
          "hibernate-search-00060",
          "hibernate-search-00070",
          "hibernate-search-00080",
          "hibernate-search-00090",
          "hibernate-search-00100",
          "hibernate-search-00105",
          "hibernate-search-00110",
          "hibernate-search-00120",
          "hibernate-search-00140",
          "hibernate-search-00150",
          "hibernate-search-00160",
          "hibernate-search-00170",
          "hibernate-search-00180",
          "hibernate-search-00190",
          "hibernate-search-00200",
          "hibernate-search-00210",
          "hibernate-search-00220",
          "hibernate-search-00230",
          "hibernate-search-00240",
          "hibernate-search-00250",
          "hibernate-search-00260",
          "hibernate-search-00270",
          "hibernate-search-00280",
          "hibernate-search-00290",
          "hibernate-search-00300",
          "hibernate-search-00310",
          "hibernate-search-00320",
          "hibernate-search-00330",
          "hibernate-search-00340",
          "hibernate-search-00350",
          "hibernate-search-00360",
          "hibernate-search-00370",
          "hibernate-search-00380",
          "hibernate-search-00390",
          "hibernate-search-00400",
          "hibernate-search-00410",
          "hibernate-search-00420",
          "hibernate-search-00430",
          "hibernate-search-00440",
          "hibernate-search-00450",
          "hibernate-search-00460",
          "hibernate-search-00470",
          "hibernate-search-00480",
          "hibernate-search-00490",
          "hibernate-search-00500",
          "hibernate-search-00510",
          "hibernate-search-00520",
          "hibernate-search-00530",
          "hibernate-search-00540",
          "hibernate-search-00550",
          "hibernate-search-00560",
          "hibernate-search-00570",
          "hibernate-search-00580",
          "hibernate-search-00590",
          "hibernate-search-00600",
          "hibernate-search-00610",
          "hibernate-search-00620",
          "hibernate-search-00630",
          "hibernate-search-00640",
          "hibernate-search-00650",
          "hibernate-search-00660",
          "hibernate-search-00670",
          "hibernate-search-00680",
          "hibernate-search-00690",
          "hibernate-search-00700",
          "hibernate-search-00710",
          "hibernate-search-00720",
          "hibernate-search-00730",
          "hibernate-search-00740",
          "hibernate-search-00750",
          "hibernate-search-00760",
          "hibernate-search-00770",
          "hibernate-search-00780",
          "hibernate-search-00790",
          "hibernate-search-00800",
          "hibernate-search-00810",
          "hibernate-search-00820",
          "hibernate-search-00830",
          "hibernate-search-00840",
          "hibernate-search-00850",
          "hibernate-search-00860",
          "hibernate-search-00870",
          "hibernate-search-00880",
          "hibernate-search-00890",
          "hibernate-search-00900",
          "hibernate-search-00910",
          "hibernate-search-00920",
          "hibernate-search-00930",
          "hibernate-search-00940",
          "hibernate-search-00950",
          "hibernate-search-00960",
          "hibernate-search-00970",
          "hibernate-search-00980",
          "hibernate-search-00990",
          "hibernate-search-01000",
          "hibernate-search-01010",
          "hibernate-search-01020",
          "hibernate-search-01030",
          "hibernate-search-01040",
          "hibernate-search-6.1-00010",
          "hibernate-search-6.1-00020",
          "hibernate-search-6.1-00030",
          "hibernate-search-6.1-00040",
          "hibernate-search-6.1-00050",
          "hibernate-search-6.1-00060",
          "hibernate-search-6.1-00070",
          "hibernate-search-6.1-00080",
          "hibernate-search-6.1-00090",
          "hibernate-search-6.1-00100",
          "hibernate-search-6.1-00120",
          "hibernate-search-6.1-00130",
          "hibernate-search-6.1-00140",
          "hibernate-search-6.1-00150",
          "hibernate-search-6.1-00160",
          "hibernate-search-6.1-00170",
          "hibernate-search-6.1-00180",
          "hibernate-search-6.1-00190",
          "hibernate6-00020",
          "hibernate6-00030",
          "hibernate6-00040",
          "hibernate6-00050",
          "hibernate6-00060",
          "hibernate6-00070",
          "hibernate6-00080",
          "hibernate6-00090",
          "hibernate6-00100",
          "hibernate6-00110",
          "hibernate6-00120",
          "hibernate6-00130",
          "hibernate6-00140",
          "hibernate6-00150",
          "hibernate6-00160",
          "hibernate6-00170",
          "hibernate6-00180",
          "hibernate6-00190",
          "hibernate6-00200",
          "hibernate6-00210",
          "hibernate6-00220",
          "hibernate6-00230",
          "hibernate6-00240",
          "hibernate6-00250",
          "hibernate6-00251",
          "hibernate6-00252",
          "hibernate6-00253",
          "hibernate6-00254",
          "hibernate6-00255",
          "hibernate6-00257",
          "hibernate6-00270",
          "jakarta-cdi-00001",
          "jakarta-cdi-00002",
          "jakarta-cdi-00003",
          "jakarta-cdi-00004",
          "jakarta-el-00010",
          "jakarta-el-00020",
          "jakarta-faces-00001",
          "jakarta-json-binding-00010",
          "jakarta-soap-00010",
          "jakarta-soap-00020",
          "jakarta-ws-rs-00001",
          "jboss-dependencies-00001",
          "jboss-dependencies-00002",
          "jboss-dependencies-00003",
          "jboss-dependencies-00004",
          "jboss-dependencies-00005",
          "jboss-dependencies-00006",
          "jboss-dependencies-00007",
          "jboss-dependencies-00008",
          "jboss-dependencies-00009",
          "jboss-dependencies-00010",
          "jboss-dependencies-00011",
          "jboss-dependencies-00012",
          "jboss-dependencies-00013",
          "jboss-dependencies-00014",
          "jboss-dependencies-00015",
          "jboss-dependencies-00016",
          "jboss-dependencies-00017",
          "jboss-dependencies-00018",
          "jboss-dependencies-00019",
          "jboss-dependencies-00020",
          "jboss-dependencies-00021",
          "jboss-dependencies-00022",
          "jboss-dependencies-00023",
          "jboss-dependencies-00024",
          "jboss-dependencies-00025",
          "jboss-dependencies-00026",
          "jboss-dependencies-00027",
          "jboss-dependencies-00028",
          "jboss-dependencies-00029",
          "jboss-dependencies-00030",
          "jboss-dependencies-00031",
          "keycloak-openid-00001",
          "keycloak-openid-00010",
          "legacy-vault-00010",
          "login-modules-00001",
          "picketlink-00010",
          "picketlink-00020",
        ],
      },
      {
        name: "eapxp/thorntail",
        description:
          "This ruleset provides analysis of Maven built applications that use Thorntail Maven Plugin, which should be replaced by JBoss EAP XP Bootable JAR Maven Plugin, when migrating to JBoss EAP XP.",
        skipped: [
          "eapxp_bootable_jar_maven_plugin_configuration_changes-1",
          "remove_thorntail_yaml_configuration_files-1",
          "replace_thorntail_boms-1",
          "replace_thorntail_boms-2",
          "replace_thorntail_fractions-01",
          "replace_thorntail_fractions-02",
          "replace_thorntail_fractions-03",
          "replace_thorntail_fractions-04",
          "replace_thorntail_fractions-05",
          "replace_thorntail_fractions-06",
          "replace_thorntail_fractions-07",
          "replace_thorntail_fractions-08",
          "replace_thorntail_fractions-09",
          "replace_thorntail_fractions-10",
          "replace_thorntail_fractions-11",
          "replace_thorntail_fractions-12",
          "replace_thorntail_fractions-13",
          "replace_thorntail_fractions-14",
          "replace_thorntail_fractions-15",
          "replace_thorntail_fractions-16",
          "replace_thorntail_fractions-17",
          "replace_thorntail_fractions-18",
          "replace_thorntail_fractions-19",
          "replace_thorntail_fractions-20",
          "replace_thorntail_fractions-21",
          "replace_thorntail_fractions-22",
          "replace_thorntail_fractions-23",
          "replace_thorntail_fractions-24",
          "replace_thorntail_fractions-25",
          "replace_thorntail_fractions-26",
          "replace_thorntail_fractions-27",
          "replace_thorntail_fractions-28",
          "replace_thorntail_fractions-29",
          "replace_thorntail_fractions-30",
          "replace_thorntail_fractions-31",
          "replace_thorntail_fractions-32",
          "replace_thorntail_fractions-33",
          "replace_thorntail_fractions-34",
          "replace_thorntail_fractions-35",
          "replace_thorntail_fractions-36",
          "replace_thorntail_fractions-37",
          "replace_thorntail_fractions-38",
          "replace_thorntail_fractions-39",
          "replace_thorntail_fractions-40",
          "replace_thorntail_fractions-41",
          "replace_thorntail_fractions-42",
          "replace_thorntail_fractions-43",
          "replace_thorntail_fractions-44",
          "replace_thorntail_fractions-45",
          "replace_thorntail_fractions-46",
          "replace_thorntail_fractions-47",
          "replace_thorntail_fractions-48",
          "replace_thorntail_fractions-49",
          "replace_thorntail_fractions-50",
          "replace_thorntail_maven_plugin-1",
        ],
      },
      {
        name: "filemappings",
        description:
          "This rule set configures the organization matching functionality, using known root-package prefixes to identify libraries and other code.",
      },
      {
        name: "fuse-service-works/soa-p-5",
        description:
          "This ruleset provides analysis of JBoss SOA Platform 5 applications and provides information on how to migrate these to Red Hat JBoss Fuse Service Works",
        skipped: [
          "soa-p-16000",
          "soa-p-17000",
          "soa-p-18000",
          "soa-p-19000",
          "soa-p-20000",
          "soa-p-21000",
          "soa-p-22000",
          "soa-p-23000",
          "soa-p-24000",
          "soa-p-25000",
          "soa-p-26000",
          "soa-p-27000",
          "soa-p-28000",
          "soa-p-29000",
          "soa-p-30000",
          "soa-p-31000",
          "soa-p-32000",
          "soa-p-33000",
          "soa-p-34000",
          "soa-p-35000",
          "soa-p-36000",
          "soa-p-37000",
          "soa-p-38000",
          "soa-p-39000",
          "soa-p-40000",
          "soa-p-41000",
          "soa-p-42000",
          "soa-p-43000",
          "soa-p-44000",
          "soa-p-45000",
          "soa-p-46000",
          "soa-p-47000",
          "soa-p-48000",
          "soa-p-49000",
          "soa-p-5-01000",
          "soa-p-5-02000",
          "soa-p-5-03000",
          "soa-p-5-04000",
          "soa-p-5-05000",
          "soa-p-5-06000",
          "soa-p-5-07000",
          "soa-p-5-08000",
          "soa-p-5-09000",
          "soa-p-5-10000",
          "soa-p-5-11000",
          "soa-p-5-12000",
          "soa-p-5-13000",
          "soa-p-5-14000",
          "soa-p-5-15000",
          "soa-p-50000",
        ],
      },
      {
        name: "fuse/sonicesb",
        description:
          "This ruleset contains rules that assist in migrating from Sonic ESB to Apache Camel.",
        skipped: [
          "sonic-catchall-00000",
          "sonic-esb-01000",
          "sonic-esb-02000",
          "sonic-esb-03000",
          "sonic-esb-04000",
          "sonic-esb-05000",
          "sonic-esb-06000",
          "sonic-esb-07000",
          "sonic-esb-08000",
          "sonic-esb-09000",
          "sonic-esb-10000",
          "sonic-esb-11000",
          "sonic-esb-12000",
          "sonic-esb-13000",
          "sonic-esb-14000",
          "sonic-esb-15000",
          "sonic-esb-16000",
          "sonic-esb-17000",
          "sonic-esb-18000",
          "sonic-esb-19000",
          "sonic-esb-20000",
          "sonic-esb-21000",
          "xml-sonic-esb-01000",
        ],
      },
      {
        name: "hibernate",
        description:
          "This ruleset provides analysis of deprecated Hibernate java constructs and their migration to newer one.",
        skipped: [
          "hibernate-01000",
          "hibernate-02000",
          "hibernate-03000",
          "hibernate-04000",
          "hibernate-05000",
          "hibernate-06000",
          "hibernate-07000",
          "hibernate-08000",
          "hibernate-09000",
          "hibernate-10000",
          "hibernate-10100",
          "hibernate-catchall-00000",
          "hibernate-xml-01000",
          "hibernate-xml-02000",
          "hibernate-xml-03000",
        ],
      },
      {
        name: "jws5",
        description:
          "This ruleset provides analysis of applications that need to change their pom dependencies to upgrade dependencies that belong to the groupId `org.apache.tomcat`",
        skipped: ["upgrade-tomcat-dependencies-00001"],
      },
      {
        name: "kai/quarkus",
        description: "Quarkus focused rules to help migrate from Java EE",
        violations: {
          "persistence-to-quarkus-00000": {
            description: "Move persistence config to a properties file",
            category: "optional",
            labels: [
              "konveyor.io/source=jakarta-ee",
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/resources/META-INF/persistence.xml",
                message:
                  'It is recommended to move persistence related configuration from an XML file to a properties one.\n This allows centralization of the configuration in Quarkus. Check the link for more information.\n \n \n Datasource and persistence configurations in XML can be substituted with a single centralized properties file. Here is an example of a translation:\n \n The following datasource configuration:\n ```\n \u003cdatasources xmlns="http://www.jboss.org/ironjacamar/schema"\n xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd"\u003e\n \u003c!-- The datasource is bound into JNDI at this location. We reference\n this in META-INF/persistence.xml --\u003e\n \u003cdatasource jndi-name="java:jboss/datasources/TasksJsfQuickstartDS"\n pool-name="tasks-jsf-quickstart" enabled="true"\n use-java-context="true"\u003e\n \u003cconnection-url\u003ejdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\u003c/connection-url\u003e\n \u003cdriver\u003eh2\u003c/driver\u003e\n \u003csecurity\u003e\n \u003cuser-name\u003esa\u003c/user-name\u003e\n \u003cpassword\u003esa\u003c/password\u003e\n \u003c/security\u003e\n \u003c/datasource\u003e\n \u003c/datasources\u003e\n ```\n along with the following persistence configuration:\n ```\n \u003cpersistence version="2.1"\n xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="\n http://xmlns.jcp.org/xml/ns/persistence\n http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n \u003cpersistence-unit name="primary"\u003e\n \u003c!-- We use a different datasource for tests, so as to not overwrite\n production data. This is an unmanaged data source, backed by H2, an in memory\n database. Production applications should use a managed datasource. --\u003e\n \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n you can find it in the source at src/test/resources/test-ds.xml --\u003e\n \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n \u003cproperties\u003e\n \u003c!-- Properties for Hibernate --\u003e\n \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n \u003c/properties\u003e\n \u003c/persistence-unit\u003e\n \u003c/persistence\u003e\n ```\n can be translated to:\n ```\n quarkus.datasource.jdbc.url=jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\n quarkus.datasource.db-kind=h2\n quarkus.datasource.username=sa\n quarkus.datasource.password=sa\n\n quarkus.hibernate-orm.database.generation=drop-and-create\n ```',
              },
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/tasks-jsf-ds.xml",
                message:
                  'It is recommended to move persistence related configuration from an XML file to a properties one.\n This allows centralization of the configuration in Quarkus. Check the link for more information.\n \n \n Datasource and persistence configurations in XML can be substituted with a single centralized properties file. Here is an example of a translation:\n \n The following datasource configuration:\n ```\n \u003cdatasources xmlns="http://www.jboss.org/ironjacamar/schema"\n xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd"\u003e\n \u003c!-- The datasource is bound into JNDI at this location. We reference\n this in META-INF/persistence.xml --\u003e\n \u003cdatasource jndi-name="java:jboss/datasources/TasksJsfQuickstartDS"\n pool-name="tasks-jsf-quickstart" enabled="true"\n use-java-context="true"\u003e\n \u003cconnection-url\u003ejdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\u003c/connection-url\u003e\n \u003cdriver\u003eh2\u003c/driver\u003e\n \u003csecurity\u003e\n \u003cuser-name\u003esa\u003c/user-name\u003e\n \u003cpassword\u003esa\u003c/password\u003e\n \u003c/security\u003e\n \u003c/datasource\u003e\n \u003c/datasources\u003e\n ```\n along with the following persistence configuration:\n ```\n \u003cpersistence version="2.1"\n xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="\n http://xmlns.jcp.org/xml/ns/persistence\n http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n \u003cpersistence-unit name="primary"\u003e\n \u003c!-- We use a different datasource for tests, so as to not overwrite\n production data. This is an unmanaged data source, backed by H2, an in memory\n database. Production applications should use a managed datasource. --\u003e\n \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n you can find it in the source at src/test/resources/test-ds.xml --\u003e\n \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n \u003cproperties\u003e\n \u003c!-- Properties for Hibernate --\u003e\n \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n \u003c/properties\u003e\n \u003c/persistence-unit\u003e\n \u003c/persistence\u003e\n ```\n can be translated to:\n ```\n quarkus.datasource.jdbc.url=jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\n quarkus.datasource.db-kind=h2\n quarkus.datasource.username=sa\n quarkus.datasource.password=sa\n\n quarkus.hibernate-orm.database.generation=drop-and-create\n ```',
              },
              {
                uri: "file:///tmp/source-code/src/test/resources/META-INF/test-persistence.xml",
                message:
                  'It is recommended to move persistence related configuration from an XML file to a properties one.\n This allows centralization of the configuration in Quarkus. Check the link for more information.\n \n \n Datasource and persistence configurations in XML can be substituted with a single centralized properties file. Here is an example of a translation:\n \n The following datasource configuration:\n ```\n \u003cdatasources xmlns="http://www.jboss.org/ironjacamar/schema"\n xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd"\u003e\n \u003c!-- The datasource is bound into JNDI at this location. We reference\n this in META-INF/persistence.xml --\u003e\n \u003cdatasource jndi-name="java:jboss/datasources/TasksJsfQuickstartDS"\n pool-name="tasks-jsf-quickstart" enabled="true"\n use-java-context="true"\u003e\n \u003cconnection-url\u003ejdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\u003c/connection-url\u003e\n \u003cdriver\u003eh2\u003c/driver\u003e\n \u003csecurity\u003e\n \u003cuser-name\u003esa\u003c/user-name\u003e\n \u003cpassword\u003esa\u003c/password\u003e\n \u003c/security\u003e\n \u003c/datasource\u003e\n \u003c/datasources\u003e\n ```\n along with the following persistence configuration:\n ```\n \u003cpersistence version="2.1"\n xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="\n http://xmlns.jcp.org/xml/ns/persistence\n http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n \u003cpersistence-unit name="primary"\u003e\n \u003c!-- We use a different datasource for tests, so as to not overwrite\n production data. This is an unmanaged data source, backed by H2, an in memory\n database. Production applications should use a managed datasource. --\u003e\n \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n you can find it in the source at src/test/resources/test-ds.xml --\u003e\n \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n \u003cproperties\u003e\n \u003c!-- Properties for Hibernate --\u003e\n \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n \u003c/properties\u003e\n \u003c/persistence-unit\u003e\n \u003c/persistence\u003e\n ```\n can be translated to:\n ```\n quarkus.datasource.jdbc.url=jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\n quarkus.datasource.db-kind=h2\n quarkus.datasource.username=sa\n quarkus.datasource.password=sa\n\n quarkus.hibernate-orm.database.generation=drop-and-create\n ```',
              },
              {
                uri: "file:///tmp/source-code/src/test/resources/test-ds.xml",
                message:
                  'It is recommended to move persistence related configuration from an XML file to a properties one.\n This allows centralization of the configuration in Quarkus. Check the link for more information.\n \n \n Datasource and persistence configurations in XML can be substituted with a single centralized properties file. Here is an example of a translation:\n \n The following datasource configuration:\n ```\n \u003cdatasources xmlns="http://www.jboss.org/ironjacamar/schema"\n xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd"\u003e\n \u003c!-- The datasource is bound into JNDI at this location. We reference\n this in META-INF/persistence.xml --\u003e\n \u003cdatasource jndi-name="java:jboss/datasources/TasksJsfQuickstartDS"\n pool-name="tasks-jsf-quickstart" enabled="true"\n use-java-context="true"\u003e\n \u003cconnection-url\u003ejdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\u003c/connection-url\u003e\n \u003cdriver\u003eh2\u003c/driver\u003e\n \u003csecurity\u003e\n \u003cuser-name\u003esa\u003c/user-name\u003e\n \u003cpassword\u003esa\u003c/password\u003e\n \u003c/security\u003e\n \u003c/datasource\u003e\n \u003c/datasources\u003e\n ```\n along with the following persistence configuration:\n ```\n \u003cpersistence version="2.1"\n xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xsi:schemaLocation="\n http://xmlns.jcp.org/xml/ns/persistence\n http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"\u003e\n \u003cpersistence-unit name="primary"\u003e\n \u003c!-- We use a different datasource for tests, so as to not overwrite\n production data. This is an unmanaged data source, backed by H2, an in memory\n database. Production applications should use a managed datasource. --\u003e\n \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n you can find it in the source at src/test/resources/test-ds.xml --\u003e\n \u003cjta-data-source\u003ejava:jboss/datasources/TasksJsfQuickstartDS\u003c/jta-data-source\u003e\n \u003cproperties\u003e\n \u003c!-- Properties for Hibernate --\u003e\n \u003cproperty name="hibernate.hbm2ddl.auto" value="create-drop" /\u003e\n \u003cproperty name="hibernate.show_sql" value="false" /\u003e\n \u003c/properties\u003e\n \u003c/persistence-unit\u003e\n \u003c/persistence\u003e\n ```\n can be translated to:\n ```\n quarkus.datasource.jdbc.url=jdbc:h2:mem:tasks-jsf-quickstart;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1\n quarkus.datasource.db-kind=h2\n quarkus.datasource.username=sa\n quarkus.datasource.password=sa\n\n quarkus.hibernate-orm.database.generation=drop-and-create\n ```',
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/hibernate-orm#persistence-xml",
                title: "Using Hibernate ORM and Jakarta persistence",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "persistence-to-quarkus-00011": {
            description: "@Produces cannot annotate an EntityManager",
            category: "potential",
            labels: [
              "konveyor.io/source=jakarta-ee",
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 26,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                message:
                  "In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  import javax.persistence.TypedQuery;\n 25  \n 26  /**\n 27   * Provides functionality for manipulation with tasks using the persistence context from {@link Resources}.\n 28   *\n 29   * @author Lukas Fryc\n 30   * @author Oliver Kiss\n 31   *\n 32   */\n 33  @Stateful\n 34  public class TaskDaoImpl implements TaskDao {\n 35  \n 36      @Inject\n 37      private EntityManager em;\n 38  \n 39      @Override\n 40      public void createTask(User user, Task task) {\n 41          if (!em.contains(user)) {\n 42              user = em.merge(user);\n 43          }\n 44          user.getTasks().add(task);\n 45          task.setOwner(user);\n 46          em.persist(task);\n 47      }\n 48  \n 49      @Override\n 50      public List\u003cTask\u003e getAll(User user) {\n 51          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 52          return query.getResultList();\n 53      }\n 54  \n 55      @Override\n 56      public List\u003cTask\u003e getRange(User user, int offset, int count) {\n 57          TypedQuery\u003cTask\u003e query = querySelectAllTasksFromUser(user);\n 58          query.setMaxResults(count);\n 59          query.setFirstResult(offset);\n 60          return query.getResultList();\n 61      }\n 62  \n 63      @Override\n 64      public List\u003cTask\u003e getForTitle(User user, String title) {\n 65          String lowerCaseTitle = "%" + title.toLowerCase() + "%";\n 66          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1 AND LOWER(t.title) LIKE ?2", Task.class)\n 67              .setParameter(1, user).setParameter(2, lowerCaseTitle).getResultList();\n 68      }\n 69  \n 70      @Override\n 71      public void deleteTask(Task task) {\n 72          if (!em.contains(task)) {\n 73              task = em.merge(task);\n 74          }\n 75          em.remove(task);\n 76      }\n 77  \n 78      private TypedQuery\u003cTask\u003e querySelectAllTasksFromUser(User user) {\n 79          return em.createQuery("SELECT t FROM Task t WHERE t.owner = ?1", Task.class).setParameter(1, user);\n 80      }\n 81  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoImpl.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                message:
                  "In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.List;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.inject.Inject;\n 23  import javax.persistence.EntityManager;\n 24  \n 25  /**\n 26   * Provides functionality for manipulation with users using persistence context from {@link Resources}.\n 27   *\n 28   * @author Lukas Fryc\n 29   * @author Oliver Kiss\n 30   *\n 31   */\n 32  @Stateful\n 33  public class UserDaoImpl implements UserDao {\n 34  \n 35      @Inject\n 36      private EntityManager em;\n 37  \n 38      public User getForUsername(String username) {\n 39          List\u003cUser\u003e result = em.createQuery("select u from User u where u.username = ?1", User.class).setParameter(1, username)\n 40              .getResultList();\n 41  \n 42          if (result.isEmpty()) {\n 43              return null;\n 44          }\n 45          return result.get(0);\n 46      }\n 47  \n 48      public void createUser(User user) {\n 49          em.persist(user);\n 50      }\n 51  }\n',
                lineNumber: 23,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/UserDaoImpl.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoIT.java",
                message:
                  "In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertEquals;\n 20  import static org.junit.Assert.assertTrue;\n 21  \n 22  import java.io.FileNotFoundException;\n 23  import java.util.List;\n 24  import javax.inject.Inject;\n 25  import javax.persistence.EntityManager;\n 26  \n 27  import org.jboss.arquillian.container.test.api.Deployment;\n 28  import org.jboss.arquillian.junit.Arquillian;\n 29  import org.jboss.arquillian.junit.InSequence;\n 30  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 31  import org.junit.Before;\n 32  import org.junit.Test;\n 33  import org.junit.runner.RunWith;\n 34  \n 35  /**\n 36   * @author Lukas Fryc\n 37   * @author Oliver Kiss\n 38   */\n 39  @RunWith(Arquillian.class)\n 40  public class TaskDaoIT {\n 41  \n 42      @Deployment\n 43      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 44          return new DefaultDeployment().withPersistence().withImportedData().getArchive()\n 45                  .addClasses(Resources.class, User.class, UserDao.class, Task.class, TaskDao.class, TaskDaoImpl.class);\n 46      }\n 47  \n 48      @Inject\n 49      private EntityManager em;\n 50  \n 51      @Inject\n 52      private TaskDao taskDao;\n 53  \n 54      private User detachedUser;\n 55  \n 56      @Before\n 57      public void setUp() throws Exception {\n 58          detachedUser = new User("jdoe");\n 59          detachedUser.setId(1L);\n 60      }\n 61  \n 62      @Test\n 63      @InSequence(1)\n 64      public void user_should_be_created_with_one_task_attached() throws Exception {\n 65          // given\n 66          User user = new User("New user");\n 67          Task task = new Task("New task");\n 68  \n 69          // when\n 70          em.persist(user);\n 71          taskDao.createTask(user, task);\n 72          List\u003cTask\u003e userTasks = em.createQuery("SELECT t FROM Task t WHERE t.owner = :owner", Task.class)\n 73                  .setParameter("owner", user).getResultList();\n 74  \n 75          // then\n 76          assertEquals(1, userTasks.size());\n 77          assertEquals(task, userTasks.get(0));\n 78      }\n 79  \n 80      @Test\n 81      @InSequence(2)\n 82      public void all_tasks_should_be_obtained_from_detachedUser() {\n 83          // when\n 84          List\u003cTask\u003e userTasks = taskDao.getAll(detachedUser);\n 85  \n 86          // then\n 87          assertEquals(2, userTasks.size());\n 88      }\n 89  \n 90      @Test\n 91      @InSequence(3)\n 92      public void range_of_tasks_should_be_provided_by_taskDao() {\n 93          // when\n 94          List\u003cTask\u003e headOfTasks = taskDao.getRange(detachedUser, 0, 1);\n 95          List\u003cTask\u003e tailOfTasks = taskDao.getRange(detachedUser, 1, 1);\n 96  \n 97          // then\n 98          assertEquals(1, headOfTasks.size());\n 99          assertEquals(1, tailOfTasks.size());\n100          assertTrue(headOfTasks.get(0).getTitle().contains("first"));\n101          assertTrue(tailOfTasks.get(0).getTitle().contains("second"));\n102      }\n103  \n104      @Test\n105      @InSequence(4)\n106      public void taskDao_should_provide_basic_case_insensitive_full_text_search() {\n107          // given\n108          String taskTitlePart = "FIRST";\n109  \n110          // when\n111          List\u003cTask\u003e titledTasks = taskDao.getForTitle(detachedUser, taskTitlePart);\n112  \n113          // then\n114          assertEquals(1, titledTasks.size());\n115          assertTrue(titledTasks.get(0).getTitle().contains("first"));\n116      }\n117  \n118      @Test\n119      @InSequence(5)\n120      public void taskDao_should_remove_task_from_detachedUser() {\n121          // given\n122          Task task = new Task();\n123          task.setId(1L);\n124          task.setOwner(detachedUser);\n125          assertEquals(2, taskDao.getAll(detachedUser).size());',
                lineNumber: 25,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/TaskDaoIT.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/UserDaoIT.java",
                message:
                  "In JavaEE/JakartaEE, using `@PersistenceContext` was needed in order to inject a data source. Quarkus, on the other hand,\n will create the bean automatically just by correctly setting up your datasource. This makes having a `@Produces` annotation\n on the `EntityManager` illegal in Quarkus.\n \n If you are using a `@Produces` annotation for your EntityManager, and it is not needed after configuring your datasource, remove it and `@Inject` the EntityManager.\n Otherwise, if the producer is still needed, please create a qualification for your produced `EntityManager`, as well as every injection point for the EM.\n \n For instance, you can create an `ExtendedContext` qualifier:\n ```\n @Qualifier\n @Target()\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ExtendedContext \n ```\n and then inject your entity managers:\n ```\n @ExtendedContext\n public EntityManager getEm() \n ```",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import static org.junit.Assert.assertNull;\n 20  import static org.junit.Assert.assertTrue;\n 21  \n 22  import java.io.FileNotFoundException;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  \n 26  import org.jboss.arquillian.container.test.api.Deployment;\n 27  import org.jboss.arquillian.junit.Arquillian;\n 28  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 29  import org.junit.Assert;\n 30  import org.junit.Test;\n 31  import org.junit.runner.RunWith;\n 32  \n 33  /**\n 34   * @author Lukas Fryc\n 35   * @author Oliver Kiss\n 36   */\n 37  @RunWith(Arquillian.class)\n 38  public class UserDaoIT {\n 39  \n 40      @Deployment\n 41      public static WebArchive deployment() throws IllegalArgumentException, FileNotFoundException {\n 42          return new DefaultDeployment().withPersistence().withImportedData().getArchive()\n 43                  .addClasses(Resources.class, User.class, UserDao.class, Task.class, TaskDao.class, UserDaoImpl.class);\n 44      }\n 45  \n 46      @Inject\n 47      private UserDao userDao;\n 48  \n 49      @Inject\n 50      private EntityManager em;\n 51  \n 52      @Test\n 53      public void userDao_should_create_user_so_it_could_be_retrieved_from_userDao_by_username() {\n 54          // given\n 55          User created = new User("username1");\n 56  \n 57          // when\n 58          userDao.createUser(created);\n 59          User retrieved = userDao.getForUsername("username1");\n 60  \n 61          // then\n 62          assertTrue(em.contains(created));\n 63          assertTrue(em.contains(retrieved));\n 64          Assert.assertEquals(created, retrieved);\n 65      }\n 66  \n 67      @Test\n 68      public void user_should_be_retrievable_from_userDao_by_username() {\n 69          // given\n 70          String username = "jdoe";\n 71  \n 72          // when\n 73          User retrieved = userDao.getForUsername(username);\n 74  \n 75          // then\n 76          Assert.assertEquals(username, retrieved.getUsername());\n 77      }\n 78  \n 79      @Test\n 80      public void userDao_should_return_null_when_searching_for_non_existent_user() {\n 81          // given\n 82          String nonExistent = "nonExistent";\n 83  \n 84          // when\n 85          User retrieved = userDao.getForUsername(nonExistent);\n 86  \n 87          // then\n 88          assertNull(retrieved);\n 89      }\n 90  }\n',
                lineNumber: 24,
                variables: {
                  file: "file:///tmp/source-code/src/test/java/org/jboss/as/quickstarts/tasksJsf/UserDaoIT.java",
                  kind: "Module",
                  name: "javax.persistence.EntityManager",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/hibernate-orm#setting-up-and-configuring-hibernate-orm",
                title: "Setting up and configuring Hibernate ORM",
              },
              {
                url: "https://quarkus.io/guides/hibernate-orm#persistence-xml",
                title: "Using Hibernate ORM and Jakarta persistence",
              },
            ],
            Extras: null,
            effort: 1,
          },
        },
        unmatched: [
          "jms-to-reactive-quarkus-00000",
          "jms-to-reactive-quarkus-00010",
          "jms-to-reactive-quarkus-00020",
          "jms-to-reactive-quarkus-00030",
          "jms-to-reactive-quarkus-00040",
          "jms-to-reactive-quarkus-00050",
        ],
      },
      {
        name: "openjdk11/openjdk8",
        description:
          "This ruleset provides analysis with respect to API removals between OpenJDK 8 and 11.",
        skipped: [
          "java-removals-00000",
          "java-removals-00010",
          "java-removals-00020",
          "java-removals-00030",
          "java-removals-00040",
          "java-removals-00041",
          "java-removals-00050",
          "java-removals-00060",
          "java-removals-00100",
          "java-removals-00110",
          "java-removals-00120",
          "java-removals-00130",
          "java-removals-00140",
          "java-removals-00150",
          "removed-javaee-modules-00000",
          "removed-javaee-modules-00010",
          "removed-javaee-modules-00020",
        ],
      },
      {
        name: "openjdk17",
        description:
          "This ruleset provides analysis regarding deprecated APIs in OpenJDK 21.",
        skipped: [
          "deprecation-00000",
          "deprecation-00005",
          "deprecation-00010",
          "deprecation-00020",
          "deprecation-00030",
          "dynamic-agents-00000",
          "finalization-deprecation-00000",
          "finalization-deprecation-00010",
          "removed-apis-00000",
          "removed-apis-00005",
          "removed-apis-00010",
          "removed-apis-00015",
          "utf-8-by-default-00000",
          "utf-8-by-default-00010",
          "utf-8-by-default-00020",
          "utf-8-by-default-00030",
        ],
      },
      {
        name: "openjdk17/openjdk11",
        description:
          "This ruleset provides analysis Security Manager classes and methods deprecated between OpenJDK 11 to 17.",
        skipped: [
          "applet-api-deprecation-00000",
          "lombok-incompatibility-00001",
          "removed-classes-00000",
          "removed-packages-00000",
          "removed-packages-00010",
          "security-manager-deprecation-00000",
          "security-manager-deprecation-00010",
          "security-manager-deprecation-00020",
          "security-manager-deprecation-00030",
          "security-manager-deprecation-00040",
          "security-manager-deprecation-00050",
          "security-manager-deprecation-00060",
          "security-manager-deprecation-00070",
        ],
      },
      {
        name: "openjdk7/oraclejdk7",
        description:
          "This ruleset provides analysis with respect to the migration from OracleJDK to OpenJDK.",
        skipped: [
          "oracle2openjdk-00000",
          "oracle2openjdk-00001",
          "oracle2openjdk-00002",
          "oracle2openjdk-00003",
          "oracle2openjdk-00004",
          "oracle2openjdk-00005",
        ],
      },
      {
        name: "openliberty/websphere",
        description:
          "This ruleset identifies usage of Java APIs and technologies which are not provided by Open Liberty.",
        skipped: [
          "ActivitySessionRule",
          "AppProfileRule",
          "AsyncBeansSchedulerRule",
          "BatchFeaturePackRule",
          "DetectEJBEntityBeansXML",
          "DetectJAXRJava",
          "DetectJAXRPC",
          "DetectJavaApplicationDeploymentJava",
          "DetectJavaPortlet",
          "DetectPolicySetAndWsSecurity",
          "DetectRemoteBundleRepositoriesJava",
          "DetectRemoteServicesJava",
          "DetectTransactionPropagationEJBRemote",
          "DetectWSATXML",
          "DetectWSBAJava",
          "DetectWSNotificationJava",
          "DynamicCacheRule",
          "DynamicQueryRule",
          "I18nRule",
          "MTOMRule",
          "SOAPOverJMSRule",
          "ServerName",
          "StartupBeanRule",
          "WOLAMissingClassesRule",
          "WOLARule",
          "WSNotificationRuleJava",
          "WebSphereSchedulerRule",
          "WebSphereSdoRule",
          "WebSphereServletRule",
          "WebSphereUnavailableAPIsAppClient",
          "WebSphereUnavailableAPIsConnectorArchitecture",
          "WebSphereUnavailableAPIsEnterpriseJavaBeans",
          "WebSphereUnavailableAPIsExceptions",
          "WebSphereUnavailableAPIsExtHelper",
          "WebSphereUnavailableAPIsExtensionRegistry",
          "WebSphereUnavailableAPIsISC",
          "WebSphereUnavailableAPIsLoggingAndRAS",
          "WebSphereUnavailableAPIsManagement",
          "WebSphereUnavailableAPIsORB",
          "WebSphereUnavailableAPIsPMI",
          "WebSphereUnavailableAPIsPortal",
          "WebSphereUnavailableAPIsResourceAdapter",
          "WebSphereUnavailableAPIsSIB",
          "WebSphereUnavailableAPIsSMF",
          "WebSphereUnavailableAPIsSecurity",
          "WebSphereUnavailableAPIsTPV",
          "WebSphereUnavailableAPIsUDDI",
          "WebSphereUnavailableAPIsWLM",
          "WebSphereUnavailableAPIsWSADIE",
          "WebSphereUnavailableAPIsWSSecurityHelper",
          "WebSphereUnavailableSPIsRRD",
          "WebSphereUnavailableSSOCookieMethod",
          "WebSphereUnavailableSSOTokenMethod",
          "WebSphereWebServicesGeneratedClassesRule",
          "WebSphereWebServicesRule",
          "WorkAreaRule",
          "XMLFeaturePackRule",
        ],
      },
      {
        name: "os/windows",
        description:
          "This is a ruleset for Windows operating system specific rules while migrating to Linux operating system.",
        skipped: ["os-specific-00001", "os-specific-00002"],
      },
      {
        name: "quarkus/springboot",
        description:
          "This ruleset gives hints to migrate from SpringBoot devtools to Quarkus",
        violations: {
          "cdi-to-quarkus-00030": {
            description: "`beans.xml` descriptor content is ignored",
            category: "potential",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/webapp/WEB-INF/beans.xml",
                message:
                  "\n `beans.xml` descriptor content is ignored and it could be removed from the application. \n Refer to the guide referenced below to check the supported CDI feature in Quarkus.\n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24  \u003c/beans\u003e\n',
                lineNumber: 19,
                variables: { data: "beans", innerText: "\n", matchingXML: "" },
              },
              {
                uri: "file:///tmp/source-code/src/test/webapp/WEB-INF/beans.xml",
                message:
                  "\n `beans.xml` descriptor content is ignored and it could be removed from the application. \n Refer to the guide referenced below to check the supported CDI feature in Quarkus.\n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n 20      xsi:schemaLocation="\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"\n 23      bean-discovery-mode="all"\u003e\n 24      \u003calternatives\u003e\n 25          \u003cstereotype\u003eorg.jboss.as.quickstarts.tasksJsf.Testing\u003c/stereotype\u003e\n 26      \u003c/alternatives\u003e\n 27  \u003c/beans\u003e\n',
                lineNumber: 25,
                variables: {
                  data: "beans",
                  innerText:
                    "\n    \n        org.jboss.as.quickstarts.tasksJsf.Testing\n    \n",
                  matchingXML:
                    "\u003calternatives\u003e\u003cstereotype\u003eorg.jboss.as.quickstarts.tasksJsf.Testing\u003c/stereotype\u003e\u003c/alternatives\u003e",
                },
              },
            ],
            Extras: null,
            effort: 3,
          },
          "cdi-to-quarkus-00040": {
            description: "Producer annotation no longer required",
            category: "potential",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                message:
                  "In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import javax.enterprise.context.Conversation;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  /**\n 28   * Provides authentication operations with current user store: {@link Authentication}.\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @Named\n 34  @RequestScoped\n 35  public class AuthController {\n 36  \n 37      @Inject\n 38      private Authentication authentication;\n 39  \n 40      @Inject\n 41      private UserDao userDao;\n 42  \n 43      @Inject\n 44      private FacesContext facesContext;\n 45  \n 46      @Inject\n 47      private Conversation conversation;\n 48  \n 49      /**\n 50       * \u003cp\u003e\n 51       * Provides current user to the context available for injection using:\n 52       * \u003c/p\u003e\n 53       *\n 54       * \u003cp\u003e\n 55       * \u003ccode\u003e@Inject @CurrentUser currentUser;\u003c/code\u003e\n 56       * \u003c/p\u003e\n 57       *\n 58       * \u003cp\u003e\n 59       * or from the Expression Language context using an expression \u003ccode\u003e#{currentUser}\u003c/code\u003e.\n 60       * \u003c/p\u003e\n 61       *\n 62       * @return current authenticated user\n 63       */\n 64      @Produces\n 65      @Named\n 66      @CurrentUser\n 67      public User getCurrentUser() {\n 68          return authentication.getCurrentUser();\n 69      }\n 70  \n 71      /**\n 72       * \u003cp\u003e\n 73       * Authenticates current user with \'username\' against user data store\n 74       * \u003c/p\u003e\n 75       *\n 76       * \u003cp\u003e\n 77       * Starts the new conversation.\n 78       * \u003c/p\u003e\n 79       *\n 80       * @param username the username of the user to authenticate\n 81       */\n 82      public void authenticate(String username) {\n 83          if (isLogged()) {\n 84              throw new IllegalStateException("User is logged and tries to authenticate again");\n 85          }\n 86  \n 87          User user = userDao.getForUsername(username);\n 88          if (user == null) {\n 89              user = createUser(username);\n 90          }\n 91          authentication.setCurrentUser(user);\n 92          conversation.begin();\n 93      }\n 94  \n 95      /**\n 96       * Logs current user out and ends the current conversation.\n 97       */\n 98      public void logout() {\n 99          authentication.setCurrentUser(null);\n100          conversation.end();\n101      }\n102  \n103      /**\n104       * Returns true if user is logged in\n105       *\n106       * @return true if user is logged in; false otherwise\n107       */\n108      public boolean isLogged() {\n109          return authentication.getCurrentUser() != null;\n110      }\n111  \n112      private User createUser(String username) {\n113          try {\n114              User user = new User(username);\n115              userDao.createUser(user);\n116              facesContext.addMessage(null, new FacesMessage("User successfully created"));\n117              return user;\n118          } catch (Exception e) {\n119              facesContext.addMessage(null, new FacesMessage("Failed to create user \'" + username + "\'", e.getMessage()));\n120              return null;\n121          }\n122      }\n123  }\n',
                lineNumber: 64,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/AuthController.java",
                  kind: "Method",
                  name: "Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                message:
                  "In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.enterprise.context.ConversationScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.inject.Named;\n 24  \n 25  /**\n 26   * \u003cp\u003e\n 27   * Holds current task in context of conversation\n 28   * \u003c/p\u003e\n 29   *\n 30   * @author Lukas Fryc\n 31   *\n 32   */\n 33  @SuppressWarnings("serial")\n 34  @ConversationScoped\n 35  public class CurrentTaskStore implements Serializable {\n 36  \n 37      private Task currentTask;\n 38  \n 39      /**\n 40       * \u003cp\u003e\n 41       * Provides current task to the context available for injection using:\n 42       * \u003c/p\u003e\n 43       *\n 44       * \u003cp\u003e\n 45       * \u003ccode\u003e@Inject @CurrentTask currentTask;\u003c/code\u003e\n 46       * \u003c/p\u003e\n 47       *\n 48       * \u003cp\u003e\n 49       * or from the Expression Language context using an expression \u003ccode\u003e#{currentTask}\u003c/code\u003e.\n 50       * \u003c/p\u003e\n 51       *\n 52       * @return current authenticated user\n 53       */\n 54      @Produces\n 55      @CurrentTask\n 56      @Named("currentTask")\n 57      public Task get() {\n 58          return currentTask;\n 59      }\n 60  \n 61      /**\n 62       * Setup current task\n 63       *\n 64       * @param currentTask task to setup as current\n 65       */\n 66      public void set(Task currentTask) {\n 67          this.currentTask = currentTask;\n 68      }\n 69  \n 70      public void unset() {\n 71          this.currentTask = null;\n 72      }\n 73  }\n',
                lineNumber: 54,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/CurrentTaskStore.java",
                  kind: "Method",
                  name: "Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 49,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Method",
                  name: "Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 54,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Method",
                  name: "Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
              {
                uri: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                message:
                  "In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier..\n This field could be accessed using a `@Named` getter method instead.\n ",
                codeSnip:
                  '  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the "License");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an "AS IS" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.tasksJsf;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.ejb.Stateful;\n 22  import javax.enterprise.context.RequestScoped;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.enterprise.inject.spi.InjectionPoint;\n 25  import javax.faces.context.FacesContext;\n 26  import javax.persistence.EntityManager;\n 27  import javax.persistence.PersistenceContext;\n 28  import javax.persistence.PersistenceContextType;\n 29  \n 30  /**\n 31   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans. As it is a stateful bean, it\n 32   * can produce extended persistence contexts.\n 33   *\n 34   * Example injection on a managed bean field:\n 35   *\n 36   * \u0026#064;Inject private EntityManager em;\n 37   *\n 38   * @author Pete Muir\n 39   * @author Lukas Fryc\n 40   *\n 41   */\n 42  @Stateful\n 43  @RequestScoped\n 44  public class Resources {\n 45  \n 46      @PersistenceContext(type = PersistenceContextType.EXTENDED)\n 47      private EntityManager em;\n 48  \n 49      @Produces\n 50      public EntityManager getEm() {\n 51          return em;\n 52      }\n 53  \n 54      @Produces\n 55      public Logger getLogger(InjectionPoint ip) {\n 56          String category = ip.getMember().getDeclaringClass().getName();\n 57          return Logger.getLogger(category);\n 58      }\n 59  \n 60      @Produces\n 61      public FacesContext getFacesContext() {\n 62          return FacesContext.getCurrentInstance();\n 63      }\n 64  }\n',
                lineNumber: 60,
                variables: {
                  file: "file:///tmp/source-code/src/main/java/org/jboss/as/quickstarts/tasksJsf/Resources.java",
                  kind: "Method",
                  name: "Produces",
                  package: "org.jboss.as.quickstarts.tasksJsf",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/cdi-reference#simplified-producer-method-declaration",
                title: "Quarkus Simplified Producer Method Declaration",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-faces-to-quarkus-00000": {
            description: "Replace JSF Dependency with MyFaces",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n JSF Dependencies with groupId `org.jboss.spec.javax.faces` should be replaced with \n \n ```\n \u003c!-- Quarkus MyFaces dependencies --\u003e \n \u003cdependency\u003e\n \u003cgroupId\u003eorg.apache.myfaces.core.extensions.quarkus\u003c/groupId\u003e\n \u003cartifactId\u003emyfaces-quarkus\u003c/artifactId\u003e\n \u003cversion\u003e4.0.1\u003c/version\u003e\n \u003c/dependency\u003e\n \n \u003c!-- Quarkus Faces utilities and components extensions --\u003e\n \u003cdependency\u003e\n \u003cgroupId\u003eio.quarkiverse.primefaces\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-primefaces\u003c/artifactId\u003e\n \u003cversion\u003e3.13.1\u003c/version\u003e\n \u003c/dependency\u003e\n \u003cdependency\u003e\n \u003cgroupId\u003eio.quarkiverse.omnifaces\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-omnifaces\u003c/artifactId\u003e\n \u003cversion\u003e4.2.0\u003c/version\u003e\n \u003c/dependency\u003e\n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 88,
                variables: {
                  data: "dependency",
                  innerText:
                    "\n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        ",
                  matchingXML:
                    "\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://myfaces.apache.org/#/coregettingstarted?id=quarkus",
                title: "Apache MyFaces: Getting Started on Quarkus",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00010": {
            description: "Adopt Quarkus BOM",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Use the Quarkus BOM to omit the version of the different Quarkus dependencies. \n Add the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003cquarkus.platform.artifact-id\u003equarkus-bom\u003c/quarkus.platform.artifact-id\u003e \n \u003cquarkus.platform.group-id\u003eio.quarkus.platform\u003c/quarkus.platform.group-id\u003e \n \u003cquarkus.platform.version\u003e3.1.0.Final\u003c/quarkus.platform.version\u003e\n \u003c/properties\u003e \n \u003cdependencyManagement\u003e \n \u003cdependencies\u003e \n \u003cdependency\u003e \n \u003cgroupId\u003e$\u003c/groupId\u003e \n \u003cartifactId\u003e$\u003c/artifactId\u003e \n \u003cversion\u003e$\u003c/version\u003e \n \u003ctype\u003epom\u003c/type\u003e \n \u003cscope\u003eimport\u003c/scope\u003e \n \u003c/dependency\u003e \n \u003c/dependencies\u003e \n \u003c/dependencyManagement\u003e \n ```\n Check the latest Quarkus version available from the `Quarkus - Releases` link below.\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 19,
                variables: {
                  data: "project",
                  innerText:
                    "\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n\n    tasks-jsf\n    war\n    Quickstart: tasks-jsf\n    This project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n\n",
                  matchingXML:
                    "\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Test dependencies --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/maven-tooling#build-tool-maven",
                title: "Quarkus - Guide",
              },
              {
                url: "https://quarkus.io/blog/tag/release/",
                title: "Quarkus - Releases",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00020": {
            description: "Adopt Quarkus Maven plugin",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Use the Quarkus Maven plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003cquarkus.platform.group-id\u003eio.quarkus.platform\u003c/quarkus.platform.group-id\u003e \n \u003cquarkus.platform.version\u003e3.1.0.Final\u003c/quarkus.platform.version\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cgroupId\u003e$\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-maven-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cextensions\u003etrue\u003c/extensions\u003e\n \u003cexecutions\u003e\n \u003cexecution\u003e\n \u003cgoals\u003e\n \u003cgoal\u003ebuild\u003c/goal\u003e\n \u003cgoal\u003egenerate-code\u003c/goal\u003e\n \u003cgoal\u003egenerate-code-tests\u003c/goal\u003e\n \u003c/goals\u003e\n \u003c/execution\u003e\n \u003c/executions\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 19,
                variables: {
                  data: "project",
                  innerText:
                    "\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n\n    tasks-jsf\n    war\n    Quickstart: tasks-jsf\n    This project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n\n",
                  matchingXML:
                    "\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Test dependencies --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/maven-tooling#build-tool-maven",
                title: "Quarkus - Guide",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00030": {
            description: "Adopt Maven Compiler plugin",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Use the Maven Compiler plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003ccompiler-plugin.version\u003e3.10.1\u003c/compiler-plugin.version\u003e\n \u003cmaven.compiler.release\u003e11\u003c/maven.compiler.release\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cconfiguration\u003e\n \u003ccompilerArgs\u003e\n \u003carg\u003e-parameters\u003c/arg\u003e\n \u003c/compilerArgs\u003e\n \u003c/configuration\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 19,
                variables: {
                  data: "project",
                  innerText:
                    "\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n\n    tasks-jsf\n    war\n    Quickstart: tasks-jsf\n    This project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n\n",
                  matchingXML:
                    "\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Test dependencies --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/maven-tooling#build-tool-maven",
                title: "Quarkus - Guide",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00040": {
            description: "Adopt Maven Surefire plugin",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Use the Maven Surefire plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003csurefire-plugin.version\u003e3.0.0\u003c/compiler-plugin.version\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cconfiguration\u003e\n \u003csystemPropertyVariables\u003e\n \u003cjava.util.logging.manager\u003eorg.jboss.logmanager.LogManager\u003c/java.util.logging.manager\u003e\n \u003cmaven.home\u003e$\u003c/maven.home\u003e\n \u003c/systemPropertyVariables\u003e\n \u003c/configuration\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 19,
                variables: {
                  data: "project",
                  innerText:
                    "\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n\n    tasks-jsf\n    war\n    Quickstart: tasks-jsf\n    This project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n\n",
                  matchingXML:
                    "\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Test dependencies --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/maven-tooling#build-tool-maven",
                title: "Quarkus - Guide",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00050": {
            description: "Adopt Maven Failsafe plugin",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Use the Maven Failsafe plugin adding the following sections to the `pom.xml` file: \n\n ```xml\n \u003cproperties\u003e \n \u003csurefire-plugin.version\u003e3.0.0\u003c/compiler-plugin.version\u003e\n \u003c/properties\u003e \n \u003cbuild\u003e\n \u003cplugins\u003e\n \u003cplugin\u003e\n \u003cartifactId\u003emaven-failsafe-plugin\u003c/artifactId\u003e\n \u003cversion\u003e$\u003c/version\u003e\n \u003cexecutions\u003e\n \u003cexecution\u003e\n \u003cgoals\u003e\n \u003cgoals\u003eintegration-test\u003c/goal\u003e\n \u003cgoals\u003everify\u003c/goal\u003e\n \u003c/goals\u003e\n \u003cconfiguration\u003e\n \u003csystemPropertyVariables\u003e\n \u003cnative.image.path\u003e$/$-runner\u003c/native.image.path\u003e\n \u003cjava.util.logging.manager\u003eorg.jboss.logmanager.LogManager\u003c/java.util.logging.manager\u003e\n \u003cmaven.home\u003e$\u003c/maven.home\u003e\n \u003c/systemPropertyVariables\u003e\n \u003c/configuration\u003e\n \u003c/execution\u003e\n \u003c/executions\u003e\n \u003c/plugin\u003e\n \u003c/plugins\u003e\n \u003c/build\u003e\n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 19,
                variables: {
                  data: "project",
                  innerText:
                    "\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n\n    tasks-jsf\n    war\n    Quickstart: tasks-jsf\n    This project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n\n",
                  matchingXML:
                    "\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Test dependencies --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/maven-tooling#build-tool-maven",
                title: "Quarkus - Guide",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00060": {
            description: "Add Maven profile to run the Quarkus native build",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Leverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file: \n\n ```xml\n \u003cprofiles\u003e\n \u003cprofile\u003e\n \u003cid\u003enative\u003c/id\u003e\n \u003cactivation\u003e\n \u003cproperty\u003e\n \u003cname\u003enative\u003c/name\u003e\n \u003c/property\u003e\n \u003c/activation\u003e\n \u003cproperties\u003e\n \u003cskipITs\u003efalse\u003c/skipITs\u003e\n \u003cquarkus.package.type\u003enative\u003c/quarkus.package.type\u003e\n \u003c/properties\u003e\n \u003c/profile\u003e\n \u003c/profiles\u003e\n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 19,
                variables: {
                  data: "project",
                  innerText:
                    "\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n\n    tasks-jsf\n    war\n    Quickstart: tasks-jsf\n    This project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n\n",
                  matchingXML:
                    "\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Test dependencies --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/maven-tooling#build-tool-maven",
                title: "Quarkus - Guide",
              },
            ],
            Extras: null,
            effort: 1,
          },
          "javaee-pom-to-quarkus-00070": {
            description: "Configure Quarkus hibernate-orm",
            category: "mandatory",
            labels: [
              "konveyor.io/source=java-ee",
              "konveyor.io/target=quarkus",
            ],
            incidents: [
              {
                uri: "file:///tmp/source-code/pom.xml",
                message:
                  "\n \n Configure Quarkus 'hibernate-orm` and jakarta persistence. \n Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres: \n\n ```\n \u003c!-- Hibernate ORM specific dependencies --\u003e\n \u003cdependency\u003e\n \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-hibernate-orm\u003c/artifactId\u003e\n \u003c/dependency\u003e\n \n \u003c!-- JDBC driver dependencies --\u003e\n \u003cdependency\u003e\n \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e\n \u003cartifactId\u003equarkus-jdbc-postgresql\u003c/artifactId\u003e\n \u003c/dependency\u003e \n ```\n \n ",
                codeSnip:
                  '  1  \u003c?xml version="1.0" encoding="UTF-8"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the "License");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an "AS IS" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30  \n 31      \u003cartifactId\u003etasks-jsf\u003c/artifactId\u003e\n 32      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 33      \u003cname\u003eQuickstart: tasks-jsf\u003c/name\u003e\n 34      \u003cdescription\u003eThis project demonstrates how to use JPA persistence to manage tasks with JSF as view layer\u003c/description\u003e\n 35  \n 36      \u003clicenses\u003e\n 37          \u003clicense\u003e\n 38              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 39              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 40              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 41          \u003c/license\u003e\n 42      \u003c/licenses\u003e\n 43  \n 44      \u003cdependencies\u003e\n 45  \n 46          \u003c!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP --\u003e\n 47          \u003cdependency\u003e\n 48              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 49              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 50              \u003cscope\u003eprovided\u003c/scope\u003e\n 51          \u003c/dependency\u003e\n 52  \n 53          \u003c!-- Test dependencies --\u003e\n 54          \u003cdependency\u003e\n 55              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 56              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 57              \u003cscope\u003etest\u003c/scope\u003e\n 58          \u003c/dependency\u003e\n 59  \n 60          \u003c!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP --\u003e\n 61          \u003cdependency\u003e\n 62              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n 63              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n 64              \u003cscope\u003eprovided\u003c/scope\u003e\n 65          \u003c/dependency\u003e\n 66  \n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n 69              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n 70              \u003cscope\u003etest\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72  \n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n 75              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n 76              \u003cscope\u003etest\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP --\u003e\n 80          \u003cdependency\u003e\n 81              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n 82              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n 83              \u003cscope\u003eprovided\u003c/scope\u003e\n 84          \u003c/dependency\u003e\n 85  \n 86          \u003c!-- Import the JSF API, we use provided scope as the API is included in JBoss EAP --\u003e\n 87          \u003cdependency\u003e\n 88              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n 89              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n 90              \u003cscope\u003eprovided\u003c/scope\u003e\n 91          \u003c/dependency\u003e\n 92  \n 93      \u003c/dependencies\u003e\n 94  \n 95      \u003cbuild\u003e\n 96          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n 97          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n 98      \u003c/build\u003e\n 99  \n100  \u003c/project\u003e\n',
                lineNumber: 62,
                variables: {
                  data: "dependency",
                  innerText:
                    "\n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        ",
                  matchingXML:
                    "\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e",
                },
              },
            ],
            links: [
              {
                url: "https://quarkus.io/guides/hibernate-orm",
                title: "Using hibernate-orm and jakarta persistence",
              },
            ],
            Extras: null,
            effort: 1,
          },
        },
        unmatched: [
          "cdi-to-quarkus-00000",
          "cdi-to-quarkus-00020",
          "cdi-to-quarkus-00050",
          "dependency-removal-for-quarkus-00000",
          "javaee-pom-to-quarkus-00080",
          "jaxrs-to-quarkus-00000",
          "jaxrs-to-quarkus-00010",
          "jaxrs-to-quarkus-00020",
          "quarkus-agroal-00000",
          "quarkus-agroal-00010",
          "quarkus-amazon-dynamodb-00000",
          "quarkus-amazon-dynamodb-00010",
          "quarkus-amazon-iam-00000",
          "quarkus-amazon-iam-00010",
          "quarkus-amazon-kms-00000",
          "quarkus-amazon-kms-00010",
          "quarkus-amazon-lambda-http-00000",
          "quarkus-amazon-lambda-http-00010",
          "quarkus-amazon-lambda-rest-00000",
          "quarkus-amazon-lambda-rest-00010",
          "quarkus-amazon-lambda-xray-00000",
          "quarkus-amazon-lambda-xray-00010",
          "quarkus-amazon-s3-00000",
          "quarkus-amazon-s3-00010",
          "quarkus-amazon-ses-00000",
          "quarkus-amazon-ses-00010",
          "quarkus-amazon-sns-00000",
          "quarkus-amazon-sns-00010",
          "quarkus-amazon-sqs-00000",
          "quarkus-amazon-sqs-00010",
          "quarkus-amazon-ssm-00000",
          "quarkus-amazon-ssm-00010",
          "quarkus-apicurio-registry-avro-00000",
          "quarkus-apicurio-registry-avro-00010",
          "quarkus-artemis-jms-00000",
          "quarkus-artemis-jms-00010",
          "quarkus-avro-00000",
          "quarkus-avro-00010",
          "quarkus-config-yaml-00000",
          "quarkus-config-yaml-00010",
          "quarkus-elytron-security-jdbc-00000",
          "quarkus-elytron-security-jdbc-00010",
          "quarkus-elytron-security-ldap-00000",
          "quarkus-elytron-security-ldap-00010",
          "quarkus-elytron-security-oauth2-00000",
          "quarkus-elytron-security-oauth2-00010",
          "quarkus-flyway-00000",
          "quarkus-flyway-00010",
          "quarkus-hibernate-envers-00000",
          "quarkus-hibernate-envers-00010",
          "quarkus-hibernate-reactive-00000",
          "quarkus-hibernate-reactive-00010",
          "quarkus-hibernate-search-orm-elasticsearch-aws-00000",
          "quarkus-hibernate-search-orm-elasticsearch-aws-00010",
          "quarkus-hibernate-validator-00000",
          "quarkus-hibernate-validator-00010",
          "quarkus-jdbc-db2-00000",
          "quarkus-jdbc-db2-00010",
          "quarkus-jdbc-derby-00000",
          "quarkus-jdbc-derby-00010",
          "quarkus-jdbc-mariadb-00000",
          "quarkus-jdbc-mariadb-00010",
          "quarkus-jdbc-mysql-00000",
          "quarkus-jdbc-mysql-00010",
          "quarkus-jdbc-oracle-00000",
          "quarkus-jdbc-oracle-00010",
          "quarkus-jdbc-postgresql-00000",
          "quarkus-jdbc-postgresql-00010",
          "quarkus-jsonb-00000",
          "quarkus-jsonb-00010",
          "quarkus-jsonp-00000",
          "quarkus-jsonp-00010",
          "quarkus-kafka-client-00000",
          "quarkus-kafka-client-00010",
          "quarkus-kafka-streams-00000",
          "quarkus-kafka-streams-00010",
          "quarkus-keycloak-admin-client-00000",
          "quarkus-keycloak-admin-client-00010",
          "quarkus-kubernetes-client-00000",
          "quarkus-kubernetes-client-00010",
          "quarkus-liquibase-00000",
          "quarkus-liquibase-00010",
          "quarkus-liquibase-mongodb-00000",
          "quarkus-liquibase-mongodb-00010",
          "quarkus-logging-gelf-00000",
          "quarkus-logging-gelf-00010",
          "quarkus-logging-sentry-00000",
          "quarkus-logging-sentry-00010",
          "quarkus-micrometer-registry-prometheus-00000",
          "quarkus-micrometer-registry-prometheus-00010",
          "quarkus-narayana-jta-00000",
          "quarkus-narayana-jta-00010",
          "quarkus-narayana-lra-00000",
          "quarkus-narayana-lra-00010",
          "quarkus-narayana-stm-00000",
          "quarkus-narayana-stm-00010",
          "quarkus-openshift-client-00000",
          "quarkus-openshift-client-00010",
          "quarkus-opentelemetry-exporter-jaeger-00000",
          "quarkus-opentelemetry-exporter-jaeger-00010",
          "quarkus-opentelemetry-exporter-otlp-00000",
          "quarkus-opentelemetry-exporter-otlp-00010",
          "quarkus-picocli-00000",
          "quarkus-picocli-00010",
          "quarkus-resteasy-multipart-00000",
          "quarkus-resteasy-multipart-00010",
          "springboot-actuator-to-quarkus-0100",
          "springboot-actuator-to-quarkus-0200",
          "springboot-annotations-to-quarkus-00000",
          "springboot-cache-to-quarkus-00000",
          "springboot-cloud-config-client-to-quarkus-00000",
          "springboot-devtools-to-quarkus-0000",
          "springboot-di-to-quarkus-00000",
          "springboot-di-to-quarkus-00001",
          "springboot-di-to-quarkus-00002",
          "springboot-generic-catchall-00100",
          "springboot-integration-to-quarkus-00010",
          "springboot-integration-to-quarkus-00020",
          "springboot-jmx-to-quarkus-00000",
          "springboot-jmx-to-quarkus-00001",
          "springboot-jpa-to-quarkus-00000",
          "springboot-metrics-to-quarkus-0100",
          "springboot-metrics-to-quarkus-0200",
          "springboot-metrics-to-quarkus-0300",
          "springboot-parent-pom-to-quarkus-00000",
          "springboot-plugins-to-quarkus-0000",
          "springboot-properties-to-quarkus-00000",
          "springboot-properties-to-quarkus-00001",
          "springboot-properties-to-quarkus-00002",
          "springboot-properties-to-quarkus-00003",
          "springboot-properties-to-quarkus-00004",
          "springboot-properties-to-quarkus-00005",
          "springboot-properties-to-quarkus-00006",
          "springboot-scheduled-to-quarkus-00000",
          "springboot-security-to-quarkus-00000",
          "springboot-shell-to-quarkus-00000",
          "springboot-web-to-quarkus-00000",
          "springboot-web-to-quarkus-00010",
          "springboot-webmvc-to-quarkus-00000",
          "springboot-webmvc-to-quarkus-01000",
        ],
      },
      {
        name: "rhr/springboot",
        description:
          "Verify the version of the Spring Boot framework is compatible with those supported by Red Hat Runtimes",
        skipped: [
          "springboot-00001",
          "springboot-00002",
          "springboot-associated-00001",
          "springboot-associated-00002",
          "springboot-associated-00003",
          "springboot-associated-00004",
          "springboot-associated-00005",
          "springboot-associated-00006",
          "springboot-associated-00007",
          "springboot-associated-00008",
          "springboot-associated-00009",
          "springboot-associated-00010",
          "springboot-associated-00011",
          "springboot-associated-00012",
          "springboot-associated-00013",
          "springboot-associated-00014",
          "springboot-associated-00015",
        ],
      },
      {
        name: "technology-usage",
        description: "This ruleset provides analysis of logging libraries.",
        tags: [
          "Bean=EJB XML",
          "CDI",
          "Connect=EJB XML",
          "Database Driver=H2 Driver",
          "Embedded H2 Driver",
          "Embedded framework - CDI",
          "Embedded framework - GIN",
          "Embedded framework - Hibernate",
          "Embedded framework - Tornado Inject",
          "Embedded library - JBoss Transactions",
          "Embedded library - JBoss logging",
          "Embedded library - JSF",
          "Embedded library - Java Transaction API (JTA)",
          "Embedded library - Logging Utils",
          "Embedded library - Narayana Arjuna",
          "Embedded library - SLF4J",
          "Embedded library - SSL",
          "Embedded=GIN",
          "Embedded=H2 Driver",
          "Embedded=Hibernate",
          "Embedded=Properties",
          "Embedded=Tornado Inject",
          "Execute=CDI",
          "Execute=GIN",
          "Execute=Tornado Inject",
          "GIN",
          "H2 Driver",
          "Hibernate",
          "Inversion of Control=CDI",
          "Inversion of Control=GIN",
          "Inversion of Control=Tornado Inject",
          "JBoss Transactions",
          "JBoss logging",
          "JSF",
          "JSF XML",
          "Java EE=CDI",
          "Java EE=EJB XML",
          "Java EE=JPA XML",
          "Java EE=JSF Page",
          "Java EE=JSF XML",
          "Java Transaction API",
          "Logging Utils",
          "Narayana Arjuna",
          "Object Mapping=Hibernate",
          "Other=Properties",
          "Persistence=JPA XML",
          "SLF4J",
          "SSL",
          "Store=H2 Driver",
          "Store=Hibernate",
          "Store=JPA XML",
          "Sustain=Properties",
          "Tornado Inject",
          "View=JSF Page",
          "View=JSF XML",
          "Web=JSF Page",
          "Web=JSF XML",
        ],
        unmatched: [
          "3rd-party-01000",
          "3rd-party-02000",
          "3rd-party-03000",
          "3rd-party-04000",
          "3rd-party-05000",
          "3rd-party-06000",
          "3rd-party-07000",
          "3rd-party-08000",
          "3rd-party-09000",
          "3rd-party-10000",
          "3rd-party-11000",
          "3rd-party-12000",
          "3rd-party-13000",
          "3rd-party-14000",
          "3rd-party-15000",
          "3rd-party-16000",
          "3rd-party-17000",
          "3rd-party-18000",
          "3rd-party-19000",
          "clustering-00000",
          "clustering-00001",
          "configuration-management-0100",
          "configuration-management-0200",
          "configuration-management-0300",
          "configuration-management-0400",
          "configuration-management-0500",
          "configuration-management-technology-usage-0100",
          "configuration-management-technology-usage-0200",
          "configuration-management-technology-usage-0300",
          "connect-01400",
          "connect-01500",
          "connect-01600",
          "connect-01700",
          "connect-01800",
          "connect-01900",
          "connect-02000",
          "connect-02100",
          "connect-02200",
          "connect-02300",
          "connect-02400",
          "connect-02500",
          "connect-02600",
          "connect-02700",
          "connect-02800",
          "database-01400",
          "database-01500",
          "database-01600",
          "database-01700",
          "database-01900",
          "database-02000",
          "database-02100",
          "database-02200",
          "database-02300",
          "database-02400",
          "database-02500",
          "database-02600",
          "database-02700",
          "database-02800",
          "database-02900",
          "database-03100",
          "database-03200",
          "ejb-01000",
          "embedded-framework-01000",
          "embedded-framework-01010",
          "embedded-framework-01100",
          "embedded-framework-01200",
          "embedded-framework-01300",
          "embedded-framework-01400",
          "embedded-framework-01600",
          "embedded-framework-01700",
          "embedded-framework-02000",
          "embedded-framework-02200",
          "embedded-framework-02300",
          "embedded-framework-02400",
          "embedded-framework-03000",
          "embedded-framework-03100",
          "embedded-framework-03200",
          "embedded-framework-03300",
          "embedded-framework-03400",
          "embedded-framework-04700",
          "embedded-framework-05000",
          "embedded-framework-05100",
          "embedded-framework-05300",
          "embedded-framework-05400",
          "embedded-framework-05600",
          "embedded-framework-05700",
          "embedded-framework-05800",
          "embedded-framework-06000",
          "embedded-framework-06100",
          "embedded-framework-06200",
          "embedded-framework-06300",
          "embedded-framework-06400",
          "embedded-framework-06500",
          "embedded-framework-06600",
          "embedded-framework-06700",
          "embedded-framework-06800",
          "embedded-framework-06900",
          "embedded-framework-07000",
          "embedded-framework-07100",
          "embedded-framework-07200",
          "embedded-framework-07300",
          "embedded-framework-07400",
          "embedded-framework-07600",
          "embedded-framework-07700",
          "embedded-framework-07800",
          "embedded-framework-07900",
          "embedded-framework-08000",
          "embedded-framework-08100",
          "embedded-framework-08200",
          "embedded-framework-08300",
          "embedded-framework-08400",
          "embedded-framework-08500",
          "embedded-framework-08600",
          "embedded-framework-08700",
          "embedded-framework-08800",
          "embedded-framework-08900",
          "embedded-framework-09000",
          "embedded-framework-09100",
          "embedded-framework-09200",
          "embedded-framework-09300",
          "embedded-framework-embedded-framework-02700",
          "embedded-framework-embedded-framework-02800",
          "embedded-framework-embedded-framework-02900",
          "embedded-framework-embedded-framework-03000",
          "embedded-framework-embedded-framework-03100",
          "embedded-framework-embedded-framework-03200",
          "embedded-framework-embedded-framework-03300",
          "embedded-framework-embedded-framework-03400",
          "embedded-framework-embedded-framework-03500",
          "embedded-framework-embedded-framework-03600",
          "embedded-framework-embedded-framework-03700",
          "embedded-framework-embedded-framework-03800",
          "embedded-framework-embedded-framework-03900",
          "embedded-framework-embedded-framework-04000",
          "embedded-framework-embedded-framework-04100",
          "embedded-framework-embedded-framework-04200",
          "embedded-framework-embedded-framework-04300",
          "embedded-framework-embedded-framework-04400",
          "embedded-framework-embedded-framework-04500",
          "embedded-framework-embedded-framework-04600",
          "embedded-framework-embedded-framework-09200",
          "embedded-framework-embedded-framework-09300",
          "integration-00001",
          "integration-00002",
          "integration-00003",
          "integration-00004",
          "integration-00005",
          "integration-00006",
          "integration-00007",
          "integration-00008",
          "integration-00009",
          "integration-00010",
          "integration-00011",
          "integration-00012",
          "integration-00013",
          "integration-00014",
          "integration-00015",
          "integration-00016",
          "integration-00017",
          "javaee-technology-usage-00010",
          "javaee-technology-usage-00011",
          "javaee-technology-usage-00012",
          "javaee-technology-usage-00013",
          "javaee-technology-usage-00020-jakarta",
          "javaee-technology-usage-00030",
          "javaee-technology-usage-00031",
          "javaee-technology-usage-00040",
          "javaee-technology-usage-00050",
          "javaee-technology-usage-00060",
          "javaee-technology-usage-00070",
          "javaee-technology-usage-00080",
          "javaee-technology-usage-00090",
          "javaee-technology-usage-00100",
          "javaee-technology-usage-00110",
          "javaee-technology-usage-00120",
          "javaee-technology-usage-00130",
          "javaee-technology-usage-00140",
          "javaee-technology-usage-00150",
          "javaee-technology-usage-00160",
          "javaee-technology-usage-00170",
          "javaee-technology-usage-00180",
          "javaee-technology-usage-00190",
          "javaee-technology-usage-00200",
          "javaee-technology-usage-00210",
          "javaee-technology-usage-00220",
          "javaee-technology-usage-00230",
          "javaee-technology-usage-00902",
          "javaee-technology-usage-00903",
          "javaee-technology-usage-00905",
          "javaee-technology-usage-00906",
          "javaee-technology-usage-00910",
          "javaee-technology-usage-00911",
          "javaee-technology-usage-00912",
          "javaee-technology-usage-00913",
          "javaee-technology-usage-00914",
          "javaee-technology-usage-00915",
          "javaee-technology-usage-00916",
          "javaee-technology-usage-00917",
          "javaee-technology-usage-00918",
          "javaee-technology-usage-00926",
          "javaee-technology-usage-00928",
          "javaee-technology-usage-00930",
          "javaee-technology-usage-00931",
          "javaee-technology-usage-00932",
          "javaee-technology-usage-00950",
          "javaee-technology-usage-00951",
          "javaee-technology-usage-00952",
          "javaee-technology-usage-00953",
          "javaee-technology-usage-00954",
          "javaee-technology-usage-00955",
          "javaee-technology-usage-00956",
          "javaee-technology-usage-00958",
          "javase-01000",
          "javase-01100",
          "javase-technology-usage-01000",
          "jta-00020",
          "jta-00030",
          "jta-00040",
          "jta-00050",
          "jta-00060",
          "jta-00070",
          "jta-00080",
          "jta-00090",
          "jta-00100",
          "jta-00110",
          "jta-00120",
          "jta-00130",
          "jta-00140",
          "jta-00150",
          "jta-00180",
          "jta-00190",
          "jta-00210",
          "logging-usage-00010",
          "logging-usage-00020",
          "logging-usage-00040",
          "logging-usage-00050",
          "logging-usage-00090",
          "logging-usage-00100",
          "logging-usage-00110",
          "logging-usage-00120",
          "logging-usage-00130",
          "logging-usage-00140",
          "logging-usage-00150",
          "logging-usage-00170",
          "logging-usage-00180",
          "logging-usage-00190",
          "logging-usage-00200",
          "logging-usage-00210",
          "logging-usage-00220",
          "logging-usage-00230",
          "logging-usage-00240",
          "logging-usage-00250",
          "logging-usage-00260",
          "logging-usage-00270",
          "logging-usage-00280",
          "logging-usage-00290",
          "mvc-01000",
          "mvc-01100",
          "mvc-01200",
          "mvc-01210",
          "mvc-01220",
          "mvc-01300",
          "mvc-01400",
          "mvc-01500",
          "mvc-01700",
          "mvc-01800",
          "mvc-01900",
          "mvc-02000",
          "mvc-02100",
          "mvc-02200",
          "mvc-02300",
          "mvc-02400",
          "mvc-02500",
          "mvc-02600",
          "mvc-02700",
          "mvc-02800",
          "mvc-02900",
          "mvc-03000",
          "mvc-03100",
          "mvc-03200",
          "mvc-03300",
          "mvc-03400",
          "mvc-03500",
          "mvc-03600",
          "mvc-03700",
          "mvc-03800",
          "mvc-03900",
          "mvc-04000",
          "mvc-04100",
          "mvc-04200",
          "mvc-04300",
          "mvc-04400",
          "mvc-04500",
          "mvc-04600",
          "mvc-04700",
          "mvc-04800",
          "mvc-04900",
          "mvc-05000",
          "mvc-05100",
          "mvc-05200",
          "mvc-05300",
          "mvc-05400",
          "mvc-05500",
          "mvc-05600",
          "mvc-05700",
          "mvc-05800",
          "mvc-05900",
          "mvc-06000",
          "non-xml-technology-usage-05000",
          "non-xml-technology-usage-06000",
          "non-xml-technology-usage-12000",
          "non-xml-technology-usage-13000",
          "non-xml-technology-usage-14000",
          "non-xml-technology-usage-18000",
          "non-xml-technology-usage-19000",
          "non-xml-technology-usage-21000",
          "non-xml-technology-usage-22000",
          "non-xml-technology-usage-23000",
          "non-xml-technology-usage-24000",
          "non-xml-technology-usage-25000",
          "non-xml-technology-usage-26000",
          "non-xml-technology-usage-27000",
          "observability-0100",
          "observability-0200",
          "observability-technology-usage-0100",
          "observability-technology-usage-0200",
          "security-01100",
          "security-01200",
          "security-01300",
          "security-01400",
          "security-01500",
          "security-01600",
          "security-01700",
          "security-01800",
          "security-01900",
          "security-02000",
          "security-02100",
          "security-02200",
          "security-02400",
          "security-02500",
          "security-02600",
          "security-02700",
          "security-02800",
          "security-02900",
          "security-03000",
          "security-03100",
          "security-03200",
          "security-03300",
          "security-03400",
          "security-03500",
          "security-03600",
          "spring-catchall-00001",
          "technology-usage-3rd-party-01000",
          "technology-usage-3rd-party-02000",
          "technology-usage-3rd-party-03000",
          "technology-usage-3rd-party-04000",
          "technology-usage-3rd-party-05000",
          "technology-usage-3rd-party-06000",
          "technology-usage-3rd-party-08000",
          "technology-usage-3rd-party-09000",
          "technology-usage-3rd-party-10000",
          "technology-usage-3rd-party-11000",
          "technology-usage-3rd-party-12000",
          "technology-usage-3rd-party-13000",
          "technology-usage-3rd-party-14000",
          "technology-usage-3rd-party-15000",
          "technology-usage-3rd-party-16000",
          "technology-usage-3rd-party-17000",
          "technology-usage-3rd-party-18000",
          "technology-usage-3rd-party-19000",
          "technology-usage-3rd-party-20000",
          "technology-usage-clustering-01000",
          "technology-usage-clustering-02000",
          "technology-usage-connect-01100",
          "technology-usage-connect-01101",
          "technology-usage-connect-01200",
          "technology-usage-connect-01300",
          "technology-usage-connect-01400",
          "technology-usage-connect-01500",
          "technology-usage-connect-01600",
          "technology-usage-connect-01700",
          "technology-usage-connect-01800",
          "technology-usage-connect-01900",
          "technology-usage-connect-02000",
          "technology-usage-connect-02100",
          "technology-usage-connect-02200",
          "technology-usage-connect-02300",
          "technology-usage-connect-02400",
          "technology-usage-connect-02500",
          "technology-usage-connect-02600",
          "technology-usage-connect-02700",
          "technology-usage-connect-02800",
          "technology-usage-database-01400",
          "technology-usage-database-01500",
          "technology-usage-database-01600",
          "technology-usage-database-01700",
          "technology-usage-database-01900",
          "technology-usage-database-02000",
          "technology-usage-database-02100",
          "technology-usage-database-02200",
          "technology-usage-database-02300",
          "technology-usage-database-02400",
          "technology-usage-database-02500",
          "technology-usage-database-02600",
          "technology-usage-database-02700",
          "technology-usage-database-02800",
          "technology-usage-database-02900",
          "technology-usage-database-03100",
          "technology-usage-database-03200",
          "technology-usage-ejb-01400",
          "technology-usage-embedded-framework-01000",
          "technology-usage-embedded-framework-01010",
          "technology-usage-embedded-framework-01100",
          "technology-usage-embedded-framework-01200",
          "technology-usage-embedded-framework-01300",
          "technology-usage-embedded-framework-01400",
          "technology-usage-embedded-framework-01600",
          "technology-usage-embedded-framework-01700",
          "technology-usage-embedded-framework-02000",
          "technology-usage-embedded-framework-02100",
          "technology-usage-embedded-framework-02200",
          "technology-usage-embedded-framework-02300",
          "technology-usage-embedded-framework-02400",
          "technology-usage-embedded-framework-04700",
          "technology-usage-embedded-framework-05000",
          "technology-usage-embedded-framework-05100",
          "technology-usage-embedded-framework-05300",
          "technology-usage-embedded-framework-05400",
          "technology-usage-embedded-framework-05600",
          "technology-usage-embedded-framework-05700",
          "technology-usage-embedded-framework-05800",
          "technology-usage-embedded-framework-06000",
          "technology-usage-embedded-framework-06100",
          "technology-usage-embedded-framework-06200",
          "technology-usage-embedded-framework-06300",
          "technology-usage-embedded-framework-06400",
          "technology-usage-embedded-framework-06500",
          "technology-usage-embedded-framework-06600",
          "technology-usage-embedded-framework-06700",
          "technology-usage-embedded-framework-06800",
          "technology-usage-embedded-framework-06900",
          "technology-usage-embedded-framework-07000",
          "technology-usage-embedded-framework-07100",
          "technology-usage-embedded-framework-07200",
          "technology-usage-embedded-framework-07300",
          "technology-usage-embedded-framework-07400",
          "technology-usage-embedded-framework-07600",
          "technology-usage-embedded-framework-07700",
          "technology-usage-embedded-framework-07800",
          "technology-usage-embedded-framework-07900",
          "technology-usage-embedded-framework-08000",
          "technology-usage-embedded-framework-08100",
          "technology-usage-embedded-framework-08200",
          "technology-usage-embedded-framework-08300",
          "technology-usage-embedded-framework-08400",
          "technology-usage-embedded-framework-08500",
          "technology-usage-embedded-framework-08600",
          "technology-usage-embedded-framework-08700",
          "technology-usage-embedded-framework-08800",
          "technology-usage-embedded-framework-08900",
          "technology-usage-embedded-framework-09000",
          "technology-usage-embedded-framework-09100",
          "technology-usage-integration-00001",
          "technology-usage-integration-00002",
          "technology-usage-integration-00003",
          "technology-usage-integration-00004",
          "technology-usage-integration-00005",
          "technology-usage-integration-00006",
          "technology-usage-integration-00007",
          "technology-usage-integration-00008",
          "technology-usage-integration-00009",
          "technology-usage-integration-00010",
          "technology-usage-integration-00011",
          "technology-usage-integration-00012",
          "technology-usage-integration-00013",
          "technology-usage-integration-00014",
          "technology-usage-integration-00015",
          "technology-usage-jta-00020",
          "technology-usage-jta-00030",
          "technology-usage-jta-00040",
          "technology-usage-jta-00050",
          "technology-usage-jta-00060",
          "technology-usage-jta-00070",
          "technology-usage-jta-00080",
          "technology-usage-jta-00090",
          "technology-usage-jta-00100",
          "technology-usage-jta-00110",
          "technology-usage-jta-00120",
          "technology-usage-jta-00130",
          "technology-usage-jta-00140",
          "technology-usage-jta-00150",
          "technology-usage-jta-00160",
          "technology-usage-jta-00170",
          "technology-usage-jta-00180",
          "technology-usage-jta-00190",
          "technology-usage-jta-00200",
          "technology-usage-jta-00210",
          "technology-usage-logging-00010",
          "technology-usage-logging-000100",
          "technology-usage-logging-000110",
          "technology-usage-logging-000120",
          "technology-usage-logging-000130",
          "technology-usage-logging-000140",
          "technology-usage-logging-000150",
          "technology-usage-logging-000160",
          "technology-usage-logging-000170",
          "technology-usage-logging-000180",
          "technology-usage-logging-000190",
          "technology-usage-logging-00020",
          "technology-usage-logging-000200",
          "technology-usage-logging-000210",
          "technology-usage-logging-000220",
          "technology-usage-logging-000230",
          "technology-usage-logging-000240",
          "technology-usage-logging-000250",
          "technology-usage-logging-000260",
          "technology-usage-logging-000270",
          "technology-usage-logging-000280",
          "technology-usage-logging-000290",
          "technology-usage-logging-00030",
          "technology-usage-logging-00040",
          "technology-usage-logging-00050",
          "technology-usage-logging-00060",
          "technology-usage-logging-00070",
          "technology-usage-logging-00080",
          "technology-usage-logging-00090",
          "technology-usage-markup-01300",
          "technology-usage-mvc-01000",
          "technology-usage-mvc-01100",
          "technology-usage-mvc-01200",
          "technology-usage-mvc-01300",
          "technology-usage-mvc-01400",
          "technology-usage-mvc-01500",
          "technology-usage-mvc-01600",
          "technology-usage-mvc-01700",
          "technology-usage-mvc-01800",
          "technology-usage-mvc-01900",
          "technology-usage-mvc-02000",
          "technology-usage-mvc-02100",
          "technology-usage-mvc-02200",
          "technology-usage-mvc-02300",
          "technology-usage-mvc-02400",
          "technology-usage-mvc-02500",
          "technology-usage-mvc-02600",
          "technology-usage-mvc-02700",
          "technology-usage-mvc-02800",
          "technology-usage-mvc-02900",
          "technology-usage-mvc-03000",
          "technology-usage-mvc-03100",
          "technology-usage-mvc-03200",
          "technology-usage-mvc-03300",
          "technology-usage-mvc-03400",
          "technology-usage-mvc-03500",
          "technology-usage-mvc-03600",
          "technology-usage-mvc-03700",
          "technology-usage-mvc-03800",
          "technology-usage-mvc-03900",
          "technology-usage-mvc-04000",
          "technology-usage-mvc-04100",
          "technology-usage-mvc-04300",
          "technology-usage-mvc-04400",
          "technology-usage-mvc-04500",
          "technology-usage-mvc-04600",
          "technology-usage-mvc-04700",
          "technology-usage-mvc-04800",
          "technology-usage-mvc-04900",
          "technology-usage-mvc-05000",
          "technology-usage-mvc-05100",
          "technology-usage-mvc-05200",
          "technology-usage-mvc-05300",
          "technology-usage-mvc-05400",
          "technology-usage-mvc-05500",
          "technology-usage-mvc-05600",
          "technology-usage-mvc-05700",
          "technology-usage-mvc-05800",
          "technology-usage-mvc-05900",
          "technology-usage-mvc-06000",
          "technology-usage-mvc-0x4200",
          "technology-usage-security-01000",
          "technology-usage-security-01100",
          "technology-usage-security-01200",
          "technology-usage-security-01300",
          "technology-usage-security-01400",
          "technology-usage-security-01500",
          "technology-usage-security-01600",
          "technology-usage-security-01700",
          "technology-usage-security-01800",
          "technology-usage-security-01900",
          "technology-usage-security-02000",
          "technology-usage-security-02100",
          "technology-usage-security-02200",
          "technology-usage-security-02300",
          "technology-usage-security-02400",
          "technology-usage-security-02500",
          "technology-usage-security-02600",
          "technology-usage-security-02700",
          "technology-usage-security-02800",
          "technology-usage-security-02900",
          "technology-usage-security-03000",
          "technology-usage-security-03100",
          "technology-usage-security-03200",
          "technology-usage-security-03300",
          "technology-usage-security-03400",
          "technology-usage-security-03500",
          "technology-usage-test-frameworks-00010",
          "technology-usage-test-frameworks-00020",
          "technology-usage-test-frameworks-00030",
          "technology-usage-test-frameworks-00040",
          "technology-usage-test-frameworks-00050",
          "technology-usage-test-frameworks-00060",
          "technology-usage-test-frameworks-00070",
          "technology-usage-test-frameworks-00080",
          "technology-usage-test-frameworks-00090",
          "technology-usage-test-frameworks-00100",
          "technology-usage-test-frameworks-00110",
          "technology-usage-test-frameworks-00120",
          "technology-usage-test-frameworks-00130",
          "technology-usage-test-frameworks-00140",
          "technology-usage-test-frameworks-00150",
          "technology-usage-test-frameworks-00160",
          "technology-usage-test-frameworks-00170",
          "technology-usage-test-frameworks-00180",
          "technology-usage-test-frameworks-00190",
          "technology-usage-test-frameworks-00200",
          "technology-usage-test-frameworks-00210",
          "technology-usage-test-frameworks-00220",
          "technology-usage-test-frameworks-00230",
          "technology-usage-test-frameworks-00240",
          "technology-usage-test-frameworks-00250",
          "technology-usage-test-frameworks-00260",
          "technology-usage-test-frameworks-00270",
          "technology-usage-test-frameworks-00280",
          "technology-usage-test-frameworks-00290",
          "technology-usage-test-frameworks-00300",
          "technology-usage-test-frameworks-00310",
          "technology-usage-test-frameworks-00320",
          "technology-usage-test-frameworks-00330",
          "technology-usage-test-frameworks-00340",
          "technology-usage-test-frameworks-00350",
          "technology-usage-test-frameworks-00360",
          "technology-usage-test-frameworks-00370",
          "technology-usage-web-01100",
          "technology-usage-web-01300",
          "technology-usage-web-01400",
          "technology-usage-web-01500",
          "technology-usage-web-01600",
          "technology-usage-web-01700",
          "technology-usage-web-01800",
          "technology-usage-web-01900",
          "technology-usage-web-02000",
          "technology-usage-web-02100",
          "technology-usage-web-02200",
          "technology-usage-web-02300",
          "technology-usage-web-02400",
          "test-frameworks-sauge-00010",
          "test-frameworks-sauge-00020",
          "test-frameworks-sauge-00030",
          "test-frameworks-sauge-00040",
          "test-frameworks-sauge-00050",
          "test-frameworks-sauge-00060",
          "test-frameworks-sauge-00070",
          "test-frameworks-sauge-00080",
          "test-frameworks-sauge-00090",
          "test-frameworks-sauge-00100",
          "test-frameworks-sauge-00110",
          "test-frameworks-sauge-00120",
          "test-frameworks-sauge-00130",
          "test-frameworks-sauge-00140",
          "test-frameworks-sauge-00150",
          "test-frameworks-sauge-00160",
          "test-frameworks-sauge-00170",
          "test-frameworks-sauge-00180",
          "test-frameworks-sauge-00190",
          "test-frameworks-sauge-00200",
          "test-frameworks-sauge-00210",
          "test-frameworks-sauge-00220",
          "test-frameworks-sauge-00230",
          "test-frameworks-sauge-00240",
          "test-frameworks-sauge-00260",
          "test-frameworks-sauge-00270",
          "test-frameworks-sauge-00280",
          "test-frameworks-sauge-00290",
          "test-frameworks-sauge-00300",
          "test-frameworks-sauge-00310",
          "test-frameworks-sauge-00320",
          "test-frameworks-sauge-00330",
          "test-frameworks-sauge-00340",
          "test-frameworks-sauge-00350",
          "test-frameworks-sauge-00360",
          "test-frameworks-sauge-00370",
          "test-frameworks-sauge-00560",
        ],
      },
    ],
    depItems: [
      {
        fileURI: "file:///opt/input/source/pom.xml",
        provider: "java",
        dependencies: [],
      },
    ],
  },
];
